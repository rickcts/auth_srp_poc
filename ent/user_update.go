// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rickcts/srp/ent/predicate"
	"github.com/rickcts/srp/ent/user"
	"github.com/rickcts/srp/ent/userauth"
	"github.com/rickcts/srp/ent/userauthevent"
	"github.com/rickcts/srp/ent/usermfa"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetName sets the "name" field.
func (uu *UserUpdate) SetName(s string) *UserUpdate {
	uu.mutation.SetName(s)
	return uu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uu *UserUpdate) SetNillableName(s *string) *UserUpdate {
	if s != nil {
		uu.SetName(*s)
	}
	return uu
}

// SetState sets the "state" field.
func (uu *UserUpdate) SetState(s string) *UserUpdate {
	uu.mutation.SetState(s)
	return uu
}

// SetNillableState sets the "state" field if the given value is not nil.
func (uu *UserUpdate) SetNillableState(s *string) *UserUpdate {
	if s != nil {
		uu.SetState(*s)
	}
	return uu
}

// AddUserAuthIDs adds the "userAuth" edge to the UserAuth entity by IDs.
func (uu *UserUpdate) AddUserAuthIDs(ids ...int) *UserUpdate {
	uu.mutation.AddUserAuthIDs(ids...)
	return uu
}

// AddUserAuth adds the "userAuth" edges to the UserAuth entity.
func (uu *UserUpdate) AddUserAuth(u ...*UserAuth) *UserUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.AddUserAuthIDs(ids...)
}

// AddUserMFAIDs adds the "userMFA" edge to the UserMFA entity by IDs.
func (uu *UserUpdate) AddUserMFAIDs(ids ...int) *UserUpdate {
	uu.mutation.AddUserMFAIDs(ids...)
	return uu
}

// AddUserMFA adds the "userMFA" edges to the UserMFA entity.
func (uu *UserUpdate) AddUserMFA(u ...*UserMFA) *UserUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.AddUserMFAIDs(ids...)
}

// AddUserAuthEventIDs adds the "userAuthEvent" edge to the UserAuthEvent entity by IDs.
func (uu *UserUpdate) AddUserAuthEventIDs(ids ...int) *UserUpdate {
	uu.mutation.AddUserAuthEventIDs(ids...)
	return uu
}

// AddUserAuthEvent adds the "userAuthEvent" edges to the UserAuthEvent entity.
func (uu *UserUpdate) AddUserAuthEvent(u ...*UserAuthEvent) *UserUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.AddUserAuthEventIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearUserAuth clears all "userAuth" edges to the UserAuth entity.
func (uu *UserUpdate) ClearUserAuth() *UserUpdate {
	uu.mutation.ClearUserAuth()
	return uu
}

// RemoveUserAuthIDs removes the "userAuth" edge to UserAuth entities by IDs.
func (uu *UserUpdate) RemoveUserAuthIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveUserAuthIDs(ids...)
	return uu
}

// RemoveUserAuth removes "userAuth" edges to UserAuth entities.
func (uu *UserUpdate) RemoveUserAuth(u ...*UserAuth) *UserUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.RemoveUserAuthIDs(ids...)
}

// ClearUserMFA clears all "userMFA" edges to the UserMFA entity.
func (uu *UserUpdate) ClearUserMFA() *UserUpdate {
	uu.mutation.ClearUserMFA()
	return uu
}

// RemoveUserMFAIDs removes the "userMFA" edge to UserMFA entities by IDs.
func (uu *UserUpdate) RemoveUserMFAIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveUserMFAIDs(ids...)
	return uu
}

// RemoveUserMFA removes "userMFA" edges to UserMFA entities.
func (uu *UserUpdate) RemoveUserMFA(u ...*UserMFA) *UserUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.RemoveUserMFAIDs(ids...)
}

// ClearUserAuthEvent clears all "userAuthEvent" edges to the UserAuthEvent entity.
func (uu *UserUpdate) ClearUserAuthEvent() *UserUpdate {
	uu.mutation.ClearUserAuthEvent()
	return uu
}

// RemoveUserAuthEventIDs removes the "userAuthEvent" edge to UserAuthEvent entities by IDs.
func (uu *UserUpdate) RemoveUserAuthEventIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveUserAuthEventIDs(ids...)
	return uu
}

// RemoveUserAuthEvent removes "userAuthEvent" edges to UserAuthEvent entities.
func (uu *UserUpdate) RemoveUserAuthEvent(u ...*UserAuthEvent) *UserUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.RemoveUserAuthEventIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if value, ok := uu.mutation.State(); ok {
		_spec.SetField(user.FieldState, field.TypeString, value)
	}
	if uu.mutation.UserAuthCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserAuthTable,
			Columns: []string{user.UserAuthColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userauth.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedUserAuthIDs(); len(nodes) > 0 && !uu.mutation.UserAuthCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserAuthTable,
			Columns: []string{user.UserAuthColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userauth.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.UserAuthIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserAuthTable,
			Columns: []string{user.UserAuthColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userauth.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.UserMFACleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserMFATable,
			Columns: []string{user.UserMFAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermfa.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedUserMFAIDs(); len(nodes) > 0 && !uu.mutation.UserMFACleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserMFATable,
			Columns: []string{user.UserMFAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermfa.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.UserMFAIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserMFATable,
			Columns: []string{user.UserMFAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermfa.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.UserAuthEventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserAuthEventTable,
			Columns: []string{user.UserAuthEventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userauthevent.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedUserAuthEventIDs(); len(nodes) > 0 && !uu.mutation.UserAuthEventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserAuthEventTable,
			Columns: []string{user.UserAuthEventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userauthevent.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.UserAuthEventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserAuthEventTable,
			Columns: []string{user.UserAuthEventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userauthevent.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetName sets the "name" field.
func (uuo *UserUpdateOne) SetName(s string) *UserUpdateOne {
	uuo.mutation.SetName(s)
	return uuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetName(*s)
	}
	return uuo
}

// SetState sets the "state" field.
func (uuo *UserUpdateOne) SetState(s string) *UserUpdateOne {
	uuo.mutation.SetState(s)
	return uuo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableState(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetState(*s)
	}
	return uuo
}

// AddUserAuthIDs adds the "userAuth" edge to the UserAuth entity by IDs.
func (uuo *UserUpdateOne) AddUserAuthIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddUserAuthIDs(ids...)
	return uuo
}

// AddUserAuth adds the "userAuth" edges to the UserAuth entity.
func (uuo *UserUpdateOne) AddUserAuth(u ...*UserAuth) *UserUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.AddUserAuthIDs(ids...)
}

// AddUserMFAIDs adds the "userMFA" edge to the UserMFA entity by IDs.
func (uuo *UserUpdateOne) AddUserMFAIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddUserMFAIDs(ids...)
	return uuo
}

// AddUserMFA adds the "userMFA" edges to the UserMFA entity.
func (uuo *UserUpdateOne) AddUserMFA(u ...*UserMFA) *UserUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.AddUserMFAIDs(ids...)
}

// AddUserAuthEventIDs adds the "userAuthEvent" edge to the UserAuthEvent entity by IDs.
func (uuo *UserUpdateOne) AddUserAuthEventIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddUserAuthEventIDs(ids...)
	return uuo
}

// AddUserAuthEvent adds the "userAuthEvent" edges to the UserAuthEvent entity.
func (uuo *UserUpdateOne) AddUserAuthEvent(u ...*UserAuthEvent) *UserUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.AddUserAuthEventIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearUserAuth clears all "userAuth" edges to the UserAuth entity.
func (uuo *UserUpdateOne) ClearUserAuth() *UserUpdateOne {
	uuo.mutation.ClearUserAuth()
	return uuo
}

// RemoveUserAuthIDs removes the "userAuth" edge to UserAuth entities by IDs.
func (uuo *UserUpdateOne) RemoveUserAuthIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveUserAuthIDs(ids...)
	return uuo
}

// RemoveUserAuth removes "userAuth" edges to UserAuth entities.
func (uuo *UserUpdateOne) RemoveUserAuth(u ...*UserAuth) *UserUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.RemoveUserAuthIDs(ids...)
}

// ClearUserMFA clears all "userMFA" edges to the UserMFA entity.
func (uuo *UserUpdateOne) ClearUserMFA() *UserUpdateOne {
	uuo.mutation.ClearUserMFA()
	return uuo
}

// RemoveUserMFAIDs removes the "userMFA" edge to UserMFA entities by IDs.
func (uuo *UserUpdateOne) RemoveUserMFAIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveUserMFAIDs(ids...)
	return uuo
}

// RemoveUserMFA removes "userMFA" edges to UserMFA entities.
func (uuo *UserUpdateOne) RemoveUserMFA(u ...*UserMFA) *UserUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.RemoveUserMFAIDs(ids...)
}

// ClearUserAuthEvent clears all "userAuthEvent" edges to the UserAuthEvent entity.
func (uuo *UserUpdateOne) ClearUserAuthEvent() *UserUpdateOne {
	uuo.mutation.ClearUserAuthEvent()
	return uuo
}

// RemoveUserAuthEventIDs removes the "userAuthEvent" edge to UserAuthEvent entities by IDs.
func (uuo *UserUpdateOne) RemoveUserAuthEventIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveUserAuthEventIDs(ids...)
	return uuo
}

// RemoveUserAuthEvent removes "userAuthEvent" edges to UserAuthEvent entities.
func (uuo *UserUpdateOne) RemoveUserAuthEvent(u ...*UserAuthEvent) *UserUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.RemoveUserAuthEventIDs(ids...)
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if value, ok := uuo.mutation.State(); ok {
		_spec.SetField(user.FieldState, field.TypeString, value)
	}
	if uuo.mutation.UserAuthCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserAuthTable,
			Columns: []string{user.UserAuthColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userauth.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedUserAuthIDs(); len(nodes) > 0 && !uuo.mutation.UserAuthCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserAuthTable,
			Columns: []string{user.UserAuthColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userauth.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.UserAuthIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserAuthTable,
			Columns: []string{user.UserAuthColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userauth.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.UserMFACleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserMFATable,
			Columns: []string{user.UserMFAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermfa.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedUserMFAIDs(); len(nodes) > 0 && !uuo.mutation.UserMFACleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserMFATable,
			Columns: []string{user.UserMFAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermfa.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.UserMFAIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserMFATable,
			Columns: []string{user.UserMFAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermfa.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.UserAuthEventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserAuthEventTable,
			Columns: []string{user.UserAuthEventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userauthevent.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedUserAuthEventIDs(); len(nodes) > 0 && !uuo.mutation.UserAuthEventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserAuthEventTable,
			Columns: []string{user.UserAuthEventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userauthevent.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.UserAuthEventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserAuthEventTable,
			Columns: []string{user.UserAuthEventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userauthevent.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
