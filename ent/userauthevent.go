// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/SimpnicServerTeam/scs-aaa-server/ent/user"
	"github.com/SimpnicServerTeam/scs-aaa-server/ent/userauthevent"
)

// UserAuthEvent is the model entity for the UserAuthEvent schema.
type UserAuthEvent struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int64 `json:"user_id,omitempty"`
	// AuthProvider holds the value of the "auth_provider" field.
	AuthProvider int64 `json:"auth_provider,omitempty"`
	// Host holds the value of the "host" field.
	Host string `json:"host,omitempty"`
	// Timestamp holds the value of the "timestamp" field.
	Timestamp time.Time `json:"timestamp,omitempty"`
	// Ns holds the value of the "ns" field.
	Ns int64 `json:"ns,omitempty"`
	// ErrorCode holds the value of the "error_code" field.
	ErrorCode int `json:"error_code,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserAuthEventQuery when eager-loading is set.
	Edges        UserAuthEventEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserAuthEventEdges holds the relations/edges for other nodes in the graph.
type UserAuthEventEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserAuthEventEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserAuthEvent) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case userauthevent.FieldID, userauthevent.FieldUserID, userauthevent.FieldAuthProvider, userauthevent.FieldNs, userauthevent.FieldErrorCode:
			values[i] = new(sql.NullInt64)
		case userauthevent.FieldHost:
			values[i] = new(sql.NullString)
		case userauthevent.FieldTimestamp:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserAuthEvent fields.
func (uae *UserAuthEvent) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userauthevent.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			uae.ID = int(value.Int64)
		case userauthevent.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				uae.UserID = value.Int64
			}
		case userauthevent.FieldAuthProvider:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field auth_provider", values[i])
			} else if value.Valid {
				uae.AuthProvider = value.Int64
			}
		case userauthevent.FieldHost:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field host", values[i])
			} else if value.Valid {
				uae.Host = value.String
			}
		case userauthevent.FieldTimestamp:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field timestamp", values[i])
			} else if value.Valid {
				uae.Timestamp = value.Time
			}
		case userauthevent.FieldNs:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ns", values[i])
			} else if value.Valid {
				uae.Ns = value.Int64
			}
		case userauthevent.FieldErrorCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field error_code", values[i])
			} else if value.Valid {
				uae.ErrorCode = int(value.Int64)
			}
		default:
			uae.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserAuthEvent.
// This includes values selected through modifiers, order, etc.
func (uae *UserAuthEvent) Value(name string) (ent.Value, error) {
	return uae.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the UserAuthEvent entity.
func (uae *UserAuthEvent) QueryUser() *UserQuery {
	return NewUserAuthEventClient(uae.config).QueryUser(uae)
}

// Update returns a builder for updating this UserAuthEvent.
// Note that you need to call UserAuthEvent.Unwrap() before calling this method if this UserAuthEvent
// was returned from a transaction, and the transaction was committed or rolled back.
func (uae *UserAuthEvent) Update() *UserAuthEventUpdateOne {
	return NewUserAuthEventClient(uae.config).UpdateOne(uae)
}

// Unwrap unwraps the UserAuthEvent entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (uae *UserAuthEvent) Unwrap() *UserAuthEvent {
	_tx, ok := uae.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserAuthEvent is not a transactional entity")
	}
	uae.config.driver = _tx.drv
	return uae
}

// String implements the fmt.Stringer.
func (uae *UserAuthEvent) String() string {
	var builder strings.Builder
	builder.WriteString("UserAuthEvent(")
	builder.WriteString(fmt.Sprintf("id=%v, ", uae.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", uae.UserID))
	builder.WriteString(", ")
	builder.WriteString("auth_provider=")
	builder.WriteString(fmt.Sprintf("%v", uae.AuthProvider))
	builder.WriteString(", ")
	builder.WriteString("host=")
	builder.WriteString(uae.Host)
	builder.WriteString(", ")
	builder.WriteString("timestamp=")
	builder.WriteString(uae.Timestamp.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("ns=")
	builder.WriteString(fmt.Sprintf("%v", uae.Ns))
	builder.WriteString(", ")
	builder.WriteString("error_code=")
	builder.WriteString(fmt.Sprintf("%v", uae.ErrorCode))
	builder.WriteByte(')')
	return builder.String()
}

// UserAuthEvents is a parsable slice of UserAuthEvent.
type UserAuthEvents []*UserAuthEvent
