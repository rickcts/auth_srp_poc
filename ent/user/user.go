// Code generated by ent, DO NOT EDIT.

package user

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// EdgeUserAuth holds the string denoting the userauth edge name in mutations.
	EdgeUserAuth = "userAuth"
	// EdgeUserMFA holds the string denoting the usermfa edge name in mutations.
	EdgeUserMFA = "userMFA"
	// EdgeUserAuthEvent holds the string denoting the userauthevent edge name in mutations.
	EdgeUserAuthEvent = "userAuthEvent"
	// Table holds the table name of the user in the database.
	Table = "users"
	// UserAuthTable is the table that holds the userAuth relation/edge.
	UserAuthTable = "user_auths"
	// UserAuthInverseTable is the table name for the UserAuth entity.
	// It exists in this package in order to avoid circular dependency with the "userauth" package.
	UserAuthInverseTable = "user_auths"
	// UserAuthColumn is the table column denoting the userAuth relation/edge.
	UserAuthColumn = "user_id"
	// UserMFATable is the table that holds the userMFA relation/edge.
	UserMFATable = "user_mf_as"
	// UserMFAInverseTable is the table name for the UserMFA entity.
	// It exists in this package in order to avoid circular dependency with the "usermfa" package.
	UserMFAInverseTable = "user_mf_as"
	// UserMFAColumn is the table column denoting the userMFA relation/edge.
	UserMFAColumn = "user_id"
	// UserAuthEventTable is the table that holds the userAuthEvent relation/edge.
	UserAuthEventTable = "user_auth_events"
	// UserAuthEventInverseTable is the table name for the UserAuthEvent entity.
	// It exists in this package in order to avoid circular dependency with the "userauthevent" package.
	UserAuthEventInverseTable = "user_auth_events"
	// UserAuthEventColumn is the table column denoting the userAuthEvent relation/edge.
	UserAuthEventColumn = "user_id"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldState,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByState orders the results by the state field.
func ByState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldState, opts...).ToFunc()
}

// ByUserAuthCount orders the results by userAuth count.
func ByUserAuthCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserAuthStep(), opts...)
	}
}

// ByUserAuth orders the results by userAuth terms.
func ByUserAuth(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserAuthStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUserMFACount orders the results by userMFA count.
func ByUserMFACount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserMFAStep(), opts...)
	}
}

// ByUserMFA orders the results by userMFA terms.
func ByUserMFA(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserMFAStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUserAuthEventCount orders the results by userAuthEvent count.
func ByUserAuthEventCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserAuthEventStep(), opts...)
	}
}

// ByUserAuthEvent orders the results by userAuthEvent terms.
func ByUserAuthEvent(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserAuthEventStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUserAuthStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserAuthInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UserAuthTable, UserAuthColumn),
	)
}
func newUserMFAStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserMFAInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UserMFATable, UserMFAColumn),
	)
}
func newUserAuthEventStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserAuthEventInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UserAuthEventTable, UserAuthEventColumn),
	)
}
