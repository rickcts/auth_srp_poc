// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/SimpnicServerTeam/scs-aaa-server/ent/predicate"
	"github.com/SimpnicServerTeam/scs-aaa-server/ent/useraccessevent"
)

// UserAccessEventDelete is the builder for deleting a UserAccessEvent entity.
type UserAccessEventDelete struct {
	config
	hooks    []Hook
	mutation *UserAccessEventMutation
}

// Where appends a list predicates to the UserAccessEventDelete builder.
func (uaed *UserAccessEventDelete) Where(ps ...predicate.UserAccessEvent) *UserAccessEventDelete {
	uaed.mutation.Where(ps...)
	return uaed
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (uaed *UserAccessEventDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, uaed.sqlExec, uaed.mutation, uaed.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (uaed *UserAccessEventDelete) ExecX(ctx context.Context) int {
	n, err := uaed.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (uaed *UserAccessEventDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(useraccessevent.Table, sqlgraph.NewFieldSpec(useraccessevent.FieldID, field.TypeInt))
	if ps := uaed.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, uaed.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	uaed.mutation.done = true
	return affected, err
}

// UserAccessEventDeleteOne is the builder for deleting a single UserAccessEvent entity.
type UserAccessEventDeleteOne struct {
	uaed *UserAccessEventDelete
}

// Where appends a list predicates to the UserAccessEventDelete builder.
func (uaedo *UserAccessEventDeleteOne) Where(ps ...predicate.UserAccessEvent) *UserAccessEventDeleteOne {
	uaedo.uaed.mutation.Where(ps...)
	return uaedo
}

// Exec executes the deletion query.
func (uaedo *UserAccessEventDeleteOne) Exec(ctx context.Context) error {
	n, err := uaedo.uaed.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{useraccessevent.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (uaedo *UserAccessEventDeleteOne) ExecX(ctx context.Context) {
	if err := uaedo.Exec(ctx); err != nil {
		panic(err)
	}
}
