// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/SimpnicServerTeam/scs-aaa-server/ent/predicate"
	"github.com/SimpnicServerTeam/scs-aaa-server/ent/user"
	"github.com/SimpnicServerTeam/scs-aaa-server/ent/userauthevent"
)

// UserAuthEventUpdate is the builder for updating UserAuthEvent entities.
type UserAuthEventUpdate struct {
	config
	hooks    []Hook
	mutation *UserAuthEventMutation
}

// Where appends a list predicates to the UserAuthEventUpdate builder.
func (uaeu *UserAuthEventUpdate) Where(ps ...predicate.UserAuthEvent) *UserAuthEventUpdate {
	uaeu.mutation.Where(ps...)
	return uaeu
}

// SetUserID sets the "user_id" field.
func (uaeu *UserAuthEventUpdate) SetUserID(i int64) *UserAuthEventUpdate {
	uaeu.mutation.SetUserID(i)
	return uaeu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (uaeu *UserAuthEventUpdate) SetNillableUserID(i *int64) *UserAuthEventUpdate {
	if i != nil {
		uaeu.SetUserID(*i)
	}
	return uaeu
}

// SetAuthProvider sets the "auth_provider" field.
func (uaeu *UserAuthEventUpdate) SetAuthProvider(i int64) *UserAuthEventUpdate {
	uaeu.mutation.ResetAuthProvider()
	uaeu.mutation.SetAuthProvider(i)
	return uaeu
}

// SetNillableAuthProvider sets the "auth_provider" field if the given value is not nil.
func (uaeu *UserAuthEventUpdate) SetNillableAuthProvider(i *int64) *UserAuthEventUpdate {
	if i != nil {
		uaeu.SetAuthProvider(*i)
	}
	return uaeu
}

// AddAuthProvider adds i to the "auth_provider" field.
func (uaeu *UserAuthEventUpdate) AddAuthProvider(i int64) *UserAuthEventUpdate {
	uaeu.mutation.AddAuthProvider(i)
	return uaeu
}

// SetHost sets the "host" field.
func (uaeu *UserAuthEventUpdate) SetHost(s string) *UserAuthEventUpdate {
	uaeu.mutation.SetHost(s)
	return uaeu
}

// SetNillableHost sets the "host" field if the given value is not nil.
func (uaeu *UserAuthEventUpdate) SetNillableHost(s *string) *UserAuthEventUpdate {
	if s != nil {
		uaeu.SetHost(*s)
	}
	return uaeu
}

// SetUnixTs sets the "unix_ts" field.
func (uaeu *UserAuthEventUpdate) SetUnixTs(t time.Time) *UserAuthEventUpdate {
	uaeu.mutation.SetUnixTs(t)
	return uaeu
}

// SetNillableUnixTs sets the "unix_ts" field if the given value is not nil.
func (uaeu *UserAuthEventUpdate) SetNillableUnixTs(t *time.Time) *UserAuthEventUpdate {
	if t != nil {
		uaeu.SetUnixTs(*t)
	}
	return uaeu
}

// SetNs sets the "ns" field.
func (uaeu *UserAuthEventUpdate) SetNs(i int64) *UserAuthEventUpdate {
	uaeu.mutation.ResetNs()
	uaeu.mutation.SetNs(i)
	return uaeu
}

// SetNillableNs sets the "ns" field if the given value is not nil.
func (uaeu *UserAuthEventUpdate) SetNillableNs(i *int64) *UserAuthEventUpdate {
	if i != nil {
		uaeu.SetNs(*i)
	}
	return uaeu
}

// AddNs adds i to the "ns" field.
func (uaeu *UserAuthEventUpdate) AddNs(i int64) *UserAuthEventUpdate {
	uaeu.mutation.AddNs(i)
	return uaeu
}

// SetErrorCode sets the "error_code" field.
func (uaeu *UserAuthEventUpdate) SetErrorCode(i int) *UserAuthEventUpdate {
	uaeu.mutation.ResetErrorCode()
	uaeu.mutation.SetErrorCode(i)
	return uaeu
}

// SetNillableErrorCode sets the "error_code" field if the given value is not nil.
func (uaeu *UserAuthEventUpdate) SetNillableErrorCode(i *int) *UserAuthEventUpdate {
	if i != nil {
		uaeu.SetErrorCode(*i)
	}
	return uaeu
}

// AddErrorCode adds i to the "error_code" field.
func (uaeu *UserAuthEventUpdate) AddErrorCode(i int) *UserAuthEventUpdate {
	uaeu.mutation.AddErrorCode(i)
	return uaeu
}

// SetUpdatedAt sets the "updated_at" field.
func (uaeu *UserAuthEventUpdate) SetUpdatedAt(t time.Time) *UserAuthEventUpdate {
	uaeu.mutation.SetUpdatedAt(t)
	return uaeu
}

// SetUser sets the "user" edge to the User entity.
func (uaeu *UserAuthEventUpdate) SetUser(u *User) *UserAuthEventUpdate {
	return uaeu.SetUserID(u.ID)
}

// Mutation returns the UserAuthEventMutation object of the builder.
func (uaeu *UserAuthEventUpdate) Mutation() *UserAuthEventMutation {
	return uaeu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (uaeu *UserAuthEventUpdate) ClearUser() *UserAuthEventUpdate {
	uaeu.mutation.ClearUser()
	return uaeu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uaeu *UserAuthEventUpdate) Save(ctx context.Context) (int, error) {
	uaeu.defaults()
	return withHooks(ctx, uaeu.sqlSave, uaeu.mutation, uaeu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uaeu *UserAuthEventUpdate) SaveX(ctx context.Context) int {
	affected, err := uaeu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uaeu *UserAuthEventUpdate) Exec(ctx context.Context) error {
	_, err := uaeu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uaeu *UserAuthEventUpdate) ExecX(ctx context.Context) {
	if err := uaeu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uaeu *UserAuthEventUpdate) defaults() {
	if _, ok := uaeu.mutation.UpdatedAt(); !ok {
		v := userauthevent.UpdateDefaultUpdatedAt()
		uaeu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uaeu *UserAuthEventUpdate) check() error {
	if uaeu.mutation.UserCleared() && len(uaeu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserAuthEvent.user"`)
	}
	return nil
}

func (uaeu *UserAuthEventUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uaeu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(userauthevent.Table, userauthevent.Columns, sqlgraph.NewFieldSpec(userauthevent.FieldID, field.TypeInt))
	if ps := uaeu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uaeu.mutation.AuthProvider(); ok {
		_spec.SetField(userauthevent.FieldAuthProvider, field.TypeInt64, value)
	}
	if value, ok := uaeu.mutation.AddedAuthProvider(); ok {
		_spec.AddField(userauthevent.FieldAuthProvider, field.TypeInt64, value)
	}
	if value, ok := uaeu.mutation.Host(); ok {
		_spec.SetField(userauthevent.FieldHost, field.TypeString, value)
	}
	if value, ok := uaeu.mutation.UnixTs(); ok {
		_spec.SetField(userauthevent.FieldUnixTs, field.TypeTime, value)
	}
	if value, ok := uaeu.mutation.Ns(); ok {
		_spec.SetField(userauthevent.FieldNs, field.TypeInt64, value)
	}
	if value, ok := uaeu.mutation.AddedNs(); ok {
		_spec.AddField(userauthevent.FieldNs, field.TypeInt64, value)
	}
	if value, ok := uaeu.mutation.ErrorCode(); ok {
		_spec.SetField(userauthevent.FieldErrorCode, field.TypeInt, value)
	}
	if value, ok := uaeu.mutation.AddedErrorCode(); ok {
		_spec.AddField(userauthevent.FieldErrorCode, field.TypeInt, value)
	}
	if value, ok := uaeu.mutation.UpdatedAt(); ok {
		_spec.SetField(userauthevent.FieldUpdatedAt, field.TypeTime, value)
	}
	if uaeu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userauthevent.UserTable,
			Columns: []string{userauthevent.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uaeu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userauthevent.UserTable,
			Columns: []string{userauthevent.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uaeu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userauthevent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uaeu.mutation.done = true
	return n, nil
}

// UserAuthEventUpdateOne is the builder for updating a single UserAuthEvent entity.
type UserAuthEventUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserAuthEventMutation
}

// SetUserID sets the "user_id" field.
func (uaeuo *UserAuthEventUpdateOne) SetUserID(i int64) *UserAuthEventUpdateOne {
	uaeuo.mutation.SetUserID(i)
	return uaeuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (uaeuo *UserAuthEventUpdateOne) SetNillableUserID(i *int64) *UserAuthEventUpdateOne {
	if i != nil {
		uaeuo.SetUserID(*i)
	}
	return uaeuo
}

// SetAuthProvider sets the "auth_provider" field.
func (uaeuo *UserAuthEventUpdateOne) SetAuthProvider(i int64) *UserAuthEventUpdateOne {
	uaeuo.mutation.ResetAuthProvider()
	uaeuo.mutation.SetAuthProvider(i)
	return uaeuo
}

// SetNillableAuthProvider sets the "auth_provider" field if the given value is not nil.
func (uaeuo *UserAuthEventUpdateOne) SetNillableAuthProvider(i *int64) *UserAuthEventUpdateOne {
	if i != nil {
		uaeuo.SetAuthProvider(*i)
	}
	return uaeuo
}

// AddAuthProvider adds i to the "auth_provider" field.
func (uaeuo *UserAuthEventUpdateOne) AddAuthProvider(i int64) *UserAuthEventUpdateOne {
	uaeuo.mutation.AddAuthProvider(i)
	return uaeuo
}

// SetHost sets the "host" field.
func (uaeuo *UserAuthEventUpdateOne) SetHost(s string) *UserAuthEventUpdateOne {
	uaeuo.mutation.SetHost(s)
	return uaeuo
}

// SetNillableHost sets the "host" field if the given value is not nil.
func (uaeuo *UserAuthEventUpdateOne) SetNillableHost(s *string) *UserAuthEventUpdateOne {
	if s != nil {
		uaeuo.SetHost(*s)
	}
	return uaeuo
}

// SetUnixTs sets the "unix_ts" field.
func (uaeuo *UserAuthEventUpdateOne) SetUnixTs(t time.Time) *UserAuthEventUpdateOne {
	uaeuo.mutation.SetUnixTs(t)
	return uaeuo
}

// SetNillableUnixTs sets the "unix_ts" field if the given value is not nil.
func (uaeuo *UserAuthEventUpdateOne) SetNillableUnixTs(t *time.Time) *UserAuthEventUpdateOne {
	if t != nil {
		uaeuo.SetUnixTs(*t)
	}
	return uaeuo
}

// SetNs sets the "ns" field.
func (uaeuo *UserAuthEventUpdateOne) SetNs(i int64) *UserAuthEventUpdateOne {
	uaeuo.mutation.ResetNs()
	uaeuo.mutation.SetNs(i)
	return uaeuo
}

// SetNillableNs sets the "ns" field if the given value is not nil.
func (uaeuo *UserAuthEventUpdateOne) SetNillableNs(i *int64) *UserAuthEventUpdateOne {
	if i != nil {
		uaeuo.SetNs(*i)
	}
	return uaeuo
}

// AddNs adds i to the "ns" field.
func (uaeuo *UserAuthEventUpdateOne) AddNs(i int64) *UserAuthEventUpdateOne {
	uaeuo.mutation.AddNs(i)
	return uaeuo
}

// SetErrorCode sets the "error_code" field.
func (uaeuo *UserAuthEventUpdateOne) SetErrorCode(i int) *UserAuthEventUpdateOne {
	uaeuo.mutation.ResetErrorCode()
	uaeuo.mutation.SetErrorCode(i)
	return uaeuo
}

// SetNillableErrorCode sets the "error_code" field if the given value is not nil.
func (uaeuo *UserAuthEventUpdateOne) SetNillableErrorCode(i *int) *UserAuthEventUpdateOne {
	if i != nil {
		uaeuo.SetErrorCode(*i)
	}
	return uaeuo
}

// AddErrorCode adds i to the "error_code" field.
func (uaeuo *UserAuthEventUpdateOne) AddErrorCode(i int) *UserAuthEventUpdateOne {
	uaeuo.mutation.AddErrorCode(i)
	return uaeuo
}

// SetUpdatedAt sets the "updated_at" field.
func (uaeuo *UserAuthEventUpdateOne) SetUpdatedAt(t time.Time) *UserAuthEventUpdateOne {
	uaeuo.mutation.SetUpdatedAt(t)
	return uaeuo
}

// SetUser sets the "user" edge to the User entity.
func (uaeuo *UserAuthEventUpdateOne) SetUser(u *User) *UserAuthEventUpdateOne {
	return uaeuo.SetUserID(u.ID)
}

// Mutation returns the UserAuthEventMutation object of the builder.
func (uaeuo *UserAuthEventUpdateOne) Mutation() *UserAuthEventMutation {
	return uaeuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (uaeuo *UserAuthEventUpdateOne) ClearUser() *UserAuthEventUpdateOne {
	uaeuo.mutation.ClearUser()
	return uaeuo
}

// Where appends a list predicates to the UserAuthEventUpdate builder.
func (uaeuo *UserAuthEventUpdateOne) Where(ps ...predicate.UserAuthEvent) *UserAuthEventUpdateOne {
	uaeuo.mutation.Where(ps...)
	return uaeuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uaeuo *UserAuthEventUpdateOne) Select(field string, fields ...string) *UserAuthEventUpdateOne {
	uaeuo.fields = append([]string{field}, fields...)
	return uaeuo
}

// Save executes the query and returns the updated UserAuthEvent entity.
func (uaeuo *UserAuthEventUpdateOne) Save(ctx context.Context) (*UserAuthEvent, error) {
	uaeuo.defaults()
	return withHooks(ctx, uaeuo.sqlSave, uaeuo.mutation, uaeuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uaeuo *UserAuthEventUpdateOne) SaveX(ctx context.Context) *UserAuthEvent {
	node, err := uaeuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uaeuo *UserAuthEventUpdateOne) Exec(ctx context.Context) error {
	_, err := uaeuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uaeuo *UserAuthEventUpdateOne) ExecX(ctx context.Context) {
	if err := uaeuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uaeuo *UserAuthEventUpdateOne) defaults() {
	if _, ok := uaeuo.mutation.UpdatedAt(); !ok {
		v := userauthevent.UpdateDefaultUpdatedAt()
		uaeuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uaeuo *UserAuthEventUpdateOne) check() error {
	if uaeuo.mutation.UserCleared() && len(uaeuo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserAuthEvent.user"`)
	}
	return nil
}

func (uaeuo *UserAuthEventUpdateOne) sqlSave(ctx context.Context) (_node *UserAuthEvent, err error) {
	if err := uaeuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(userauthevent.Table, userauthevent.Columns, sqlgraph.NewFieldSpec(userauthevent.FieldID, field.TypeInt))
	id, ok := uaeuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserAuthEvent.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uaeuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userauthevent.FieldID)
		for _, f := range fields {
			if !userauthevent.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userauthevent.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uaeuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uaeuo.mutation.AuthProvider(); ok {
		_spec.SetField(userauthevent.FieldAuthProvider, field.TypeInt64, value)
	}
	if value, ok := uaeuo.mutation.AddedAuthProvider(); ok {
		_spec.AddField(userauthevent.FieldAuthProvider, field.TypeInt64, value)
	}
	if value, ok := uaeuo.mutation.Host(); ok {
		_spec.SetField(userauthevent.FieldHost, field.TypeString, value)
	}
	if value, ok := uaeuo.mutation.UnixTs(); ok {
		_spec.SetField(userauthevent.FieldUnixTs, field.TypeTime, value)
	}
	if value, ok := uaeuo.mutation.Ns(); ok {
		_spec.SetField(userauthevent.FieldNs, field.TypeInt64, value)
	}
	if value, ok := uaeuo.mutation.AddedNs(); ok {
		_spec.AddField(userauthevent.FieldNs, field.TypeInt64, value)
	}
	if value, ok := uaeuo.mutation.ErrorCode(); ok {
		_spec.SetField(userauthevent.FieldErrorCode, field.TypeInt, value)
	}
	if value, ok := uaeuo.mutation.AddedErrorCode(); ok {
		_spec.AddField(userauthevent.FieldErrorCode, field.TypeInt, value)
	}
	if value, ok := uaeuo.mutation.UpdatedAt(); ok {
		_spec.SetField(userauthevent.FieldUpdatedAt, field.TypeTime, value)
	}
	if uaeuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userauthevent.UserTable,
			Columns: []string{userauthevent.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uaeuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userauthevent.UserTable,
			Columns: []string{userauthevent.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserAuthEvent{config: uaeuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uaeuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userauthevent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uaeuo.mutation.done = true
	return _node, nil
}
