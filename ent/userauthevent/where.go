// Code generated by ent, DO NOT EDIT.

package userauthevent

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/SimpnicServerTeam/scs-aaa-server/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.UserAuthEvent {
	return predicate.UserAuthEvent(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.UserAuthEvent {
	return predicate.UserAuthEvent(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.UserAuthEvent {
	return predicate.UserAuthEvent(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.UserAuthEvent {
	return predicate.UserAuthEvent(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.UserAuthEvent {
	return predicate.UserAuthEvent(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.UserAuthEvent {
	return predicate.UserAuthEvent(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.UserAuthEvent {
	return predicate.UserAuthEvent(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.UserAuthEvent {
	return predicate.UserAuthEvent(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.UserAuthEvent {
	return predicate.UserAuthEvent(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int64) predicate.UserAuthEvent {
	return predicate.UserAuthEvent(sql.FieldEQ(FieldUserID, v))
}

// AuthProvider applies equality check predicate on the "auth_provider" field. It's identical to AuthProviderEQ.
func AuthProvider(v int64) predicate.UserAuthEvent {
	return predicate.UserAuthEvent(sql.FieldEQ(FieldAuthProvider, v))
}

// Host applies equality check predicate on the "host" field. It's identical to HostEQ.
func Host(v string) predicate.UserAuthEvent {
	return predicate.UserAuthEvent(sql.FieldEQ(FieldHost, v))
}

// UnixTs applies equality check predicate on the "unix_ts" field. It's identical to UnixTsEQ.
func UnixTs(v time.Time) predicate.UserAuthEvent {
	return predicate.UserAuthEvent(sql.FieldEQ(FieldUnixTs, v))
}

// Ns applies equality check predicate on the "ns" field. It's identical to NsEQ.
func Ns(v int64) predicate.UserAuthEvent {
	return predicate.UserAuthEvent(sql.FieldEQ(FieldNs, v))
}

// ErrorCode applies equality check predicate on the "error_code" field. It's identical to ErrorCodeEQ.
func ErrorCode(v int) predicate.UserAuthEvent {
	return predicate.UserAuthEvent(sql.FieldEQ(FieldErrorCode, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.UserAuthEvent {
	return predicate.UserAuthEvent(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.UserAuthEvent {
	return predicate.UserAuthEvent(sql.FieldEQ(FieldUpdatedAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int64) predicate.UserAuthEvent {
	return predicate.UserAuthEvent(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int64) predicate.UserAuthEvent {
	return predicate.UserAuthEvent(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int64) predicate.UserAuthEvent {
	return predicate.UserAuthEvent(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int64) predicate.UserAuthEvent {
	return predicate.UserAuthEvent(sql.FieldNotIn(FieldUserID, vs...))
}

// AuthProviderEQ applies the EQ predicate on the "auth_provider" field.
func AuthProviderEQ(v int64) predicate.UserAuthEvent {
	return predicate.UserAuthEvent(sql.FieldEQ(FieldAuthProvider, v))
}

// AuthProviderNEQ applies the NEQ predicate on the "auth_provider" field.
func AuthProviderNEQ(v int64) predicate.UserAuthEvent {
	return predicate.UserAuthEvent(sql.FieldNEQ(FieldAuthProvider, v))
}

// AuthProviderIn applies the In predicate on the "auth_provider" field.
func AuthProviderIn(vs ...int64) predicate.UserAuthEvent {
	return predicate.UserAuthEvent(sql.FieldIn(FieldAuthProvider, vs...))
}

// AuthProviderNotIn applies the NotIn predicate on the "auth_provider" field.
func AuthProviderNotIn(vs ...int64) predicate.UserAuthEvent {
	return predicate.UserAuthEvent(sql.FieldNotIn(FieldAuthProvider, vs...))
}

// AuthProviderGT applies the GT predicate on the "auth_provider" field.
func AuthProviderGT(v int64) predicate.UserAuthEvent {
	return predicate.UserAuthEvent(sql.FieldGT(FieldAuthProvider, v))
}

// AuthProviderGTE applies the GTE predicate on the "auth_provider" field.
func AuthProviderGTE(v int64) predicate.UserAuthEvent {
	return predicate.UserAuthEvent(sql.FieldGTE(FieldAuthProvider, v))
}

// AuthProviderLT applies the LT predicate on the "auth_provider" field.
func AuthProviderLT(v int64) predicate.UserAuthEvent {
	return predicate.UserAuthEvent(sql.FieldLT(FieldAuthProvider, v))
}

// AuthProviderLTE applies the LTE predicate on the "auth_provider" field.
func AuthProviderLTE(v int64) predicate.UserAuthEvent {
	return predicate.UserAuthEvent(sql.FieldLTE(FieldAuthProvider, v))
}

// HostEQ applies the EQ predicate on the "host" field.
func HostEQ(v string) predicate.UserAuthEvent {
	return predicate.UserAuthEvent(sql.FieldEQ(FieldHost, v))
}

// HostNEQ applies the NEQ predicate on the "host" field.
func HostNEQ(v string) predicate.UserAuthEvent {
	return predicate.UserAuthEvent(sql.FieldNEQ(FieldHost, v))
}

// HostIn applies the In predicate on the "host" field.
func HostIn(vs ...string) predicate.UserAuthEvent {
	return predicate.UserAuthEvent(sql.FieldIn(FieldHost, vs...))
}

// HostNotIn applies the NotIn predicate on the "host" field.
func HostNotIn(vs ...string) predicate.UserAuthEvent {
	return predicate.UserAuthEvent(sql.FieldNotIn(FieldHost, vs...))
}

// HostGT applies the GT predicate on the "host" field.
func HostGT(v string) predicate.UserAuthEvent {
	return predicate.UserAuthEvent(sql.FieldGT(FieldHost, v))
}

// HostGTE applies the GTE predicate on the "host" field.
func HostGTE(v string) predicate.UserAuthEvent {
	return predicate.UserAuthEvent(sql.FieldGTE(FieldHost, v))
}

// HostLT applies the LT predicate on the "host" field.
func HostLT(v string) predicate.UserAuthEvent {
	return predicate.UserAuthEvent(sql.FieldLT(FieldHost, v))
}

// HostLTE applies the LTE predicate on the "host" field.
func HostLTE(v string) predicate.UserAuthEvent {
	return predicate.UserAuthEvent(sql.FieldLTE(FieldHost, v))
}

// HostContains applies the Contains predicate on the "host" field.
func HostContains(v string) predicate.UserAuthEvent {
	return predicate.UserAuthEvent(sql.FieldContains(FieldHost, v))
}

// HostHasPrefix applies the HasPrefix predicate on the "host" field.
func HostHasPrefix(v string) predicate.UserAuthEvent {
	return predicate.UserAuthEvent(sql.FieldHasPrefix(FieldHost, v))
}

// HostHasSuffix applies the HasSuffix predicate on the "host" field.
func HostHasSuffix(v string) predicate.UserAuthEvent {
	return predicate.UserAuthEvent(sql.FieldHasSuffix(FieldHost, v))
}

// HostEqualFold applies the EqualFold predicate on the "host" field.
func HostEqualFold(v string) predicate.UserAuthEvent {
	return predicate.UserAuthEvent(sql.FieldEqualFold(FieldHost, v))
}

// HostContainsFold applies the ContainsFold predicate on the "host" field.
func HostContainsFold(v string) predicate.UserAuthEvent {
	return predicate.UserAuthEvent(sql.FieldContainsFold(FieldHost, v))
}

// UnixTsEQ applies the EQ predicate on the "unix_ts" field.
func UnixTsEQ(v time.Time) predicate.UserAuthEvent {
	return predicate.UserAuthEvent(sql.FieldEQ(FieldUnixTs, v))
}

// UnixTsNEQ applies the NEQ predicate on the "unix_ts" field.
func UnixTsNEQ(v time.Time) predicate.UserAuthEvent {
	return predicate.UserAuthEvent(sql.FieldNEQ(FieldUnixTs, v))
}

// UnixTsIn applies the In predicate on the "unix_ts" field.
func UnixTsIn(vs ...time.Time) predicate.UserAuthEvent {
	return predicate.UserAuthEvent(sql.FieldIn(FieldUnixTs, vs...))
}

// UnixTsNotIn applies the NotIn predicate on the "unix_ts" field.
func UnixTsNotIn(vs ...time.Time) predicate.UserAuthEvent {
	return predicate.UserAuthEvent(sql.FieldNotIn(FieldUnixTs, vs...))
}

// UnixTsGT applies the GT predicate on the "unix_ts" field.
func UnixTsGT(v time.Time) predicate.UserAuthEvent {
	return predicate.UserAuthEvent(sql.FieldGT(FieldUnixTs, v))
}

// UnixTsGTE applies the GTE predicate on the "unix_ts" field.
func UnixTsGTE(v time.Time) predicate.UserAuthEvent {
	return predicate.UserAuthEvent(sql.FieldGTE(FieldUnixTs, v))
}

// UnixTsLT applies the LT predicate on the "unix_ts" field.
func UnixTsLT(v time.Time) predicate.UserAuthEvent {
	return predicate.UserAuthEvent(sql.FieldLT(FieldUnixTs, v))
}

// UnixTsLTE applies the LTE predicate on the "unix_ts" field.
func UnixTsLTE(v time.Time) predicate.UserAuthEvent {
	return predicate.UserAuthEvent(sql.FieldLTE(FieldUnixTs, v))
}

// NsEQ applies the EQ predicate on the "ns" field.
func NsEQ(v int64) predicate.UserAuthEvent {
	return predicate.UserAuthEvent(sql.FieldEQ(FieldNs, v))
}

// NsNEQ applies the NEQ predicate on the "ns" field.
func NsNEQ(v int64) predicate.UserAuthEvent {
	return predicate.UserAuthEvent(sql.FieldNEQ(FieldNs, v))
}

// NsIn applies the In predicate on the "ns" field.
func NsIn(vs ...int64) predicate.UserAuthEvent {
	return predicate.UserAuthEvent(sql.FieldIn(FieldNs, vs...))
}

// NsNotIn applies the NotIn predicate on the "ns" field.
func NsNotIn(vs ...int64) predicate.UserAuthEvent {
	return predicate.UserAuthEvent(sql.FieldNotIn(FieldNs, vs...))
}

// NsGT applies the GT predicate on the "ns" field.
func NsGT(v int64) predicate.UserAuthEvent {
	return predicate.UserAuthEvent(sql.FieldGT(FieldNs, v))
}

// NsGTE applies the GTE predicate on the "ns" field.
func NsGTE(v int64) predicate.UserAuthEvent {
	return predicate.UserAuthEvent(sql.FieldGTE(FieldNs, v))
}

// NsLT applies the LT predicate on the "ns" field.
func NsLT(v int64) predicate.UserAuthEvent {
	return predicate.UserAuthEvent(sql.FieldLT(FieldNs, v))
}

// NsLTE applies the LTE predicate on the "ns" field.
func NsLTE(v int64) predicate.UserAuthEvent {
	return predicate.UserAuthEvent(sql.FieldLTE(FieldNs, v))
}

// ErrorCodeEQ applies the EQ predicate on the "error_code" field.
func ErrorCodeEQ(v int) predicate.UserAuthEvent {
	return predicate.UserAuthEvent(sql.FieldEQ(FieldErrorCode, v))
}

// ErrorCodeNEQ applies the NEQ predicate on the "error_code" field.
func ErrorCodeNEQ(v int) predicate.UserAuthEvent {
	return predicate.UserAuthEvent(sql.FieldNEQ(FieldErrorCode, v))
}

// ErrorCodeIn applies the In predicate on the "error_code" field.
func ErrorCodeIn(vs ...int) predicate.UserAuthEvent {
	return predicate.UserAuthEvent(sql.FieldIn(FieldErrorCode, vs...))
}

// ErrorCodeNotIn applies the NotIn predicate on the "error_code" field.
func ErrorCodeNotIn(vs ...int) predicate.UserAuthEvent {
	return predicate.UserAuthEvent(sql.FieldNotIn(FieldErrorCode, vs...))
}

// ErrorCodeGT applies the GT predicate on the "error_code" field.
func ErrorCodeGT(v int) predicate.UserAuthEvent {
	return predicate.UserAuthEvent(sql.FieldGT(FieldErrorCode, v))
}

// ErrorCodeGTE applies the GTE predicate on the "error_code" field.
func ErrorCodeGTE(v int) predicate.UserAuthEvent {
	return predicate.UserAuthEvent(sql.FieldGTE(FieldErrorCode, v))
}

// ErrorCodeLT applies the LT predicate on the "error_code" field.
func ErrorCodeLT(v int) predicate.UserAuthEvent {
	return predicate.UserAuthEvent(sql.FieldLT(FieldErrorCode, v))
}

// ErrorCodeLTE applies the LTE predicate on the "error_code" field.
func ErrorCodeLTE(v int) predicate.UserAuthEvent {
	return predicate.UserAuthEvent(sql.FieldLTE(FieldErrorCode, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.UserAuthEvent {
	return predicate.UserAuthEvent(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.UserAuthEvent {
	return predicate.UserAuthEvent(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.UserAuthEvent {
	return predicate.UserAuthEvent(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.UserAuthEvent {
	return predicate.UserAuthEvent(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.UserAuthEvent {
	return predicate.UserAuthEvent(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.UserAuthEvent {
	return predicate.UserAuthEvent(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.UserAuthEvent {
	return predicate.UserAuthEvent(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.UserAuthEvent {
	return predicate.UserAuthEvent(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.UserAuthEvent {
	return predicate.UserAuthEvent(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.UserAuthEvent {
	return predicate.UserAuthEvent(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.UserAuthEvent {
	return predicate.UserAuthEvent(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.UserAuthEvent {
	return predicate.UserAuthEvent(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.UserAuthEvent {
	return predicate.UserAuthEvent(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.UserAuthEvent {
	return predicate.UserAuthEvent(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.UserAuthEvent {
	return predicate.UserAuthEvent(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.UserAuthEvent {
	return predicate.UserAuthEvent(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.UserAuthEvent {
	return predicate.UserAuthEvent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.UserAuthEvent {
	return predicate.UserAuthEvent(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserAuthEvent) predicate.UserAuthEvent {
	return predicate.UserAuthEvent(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserAuthEvent) predicate.UserAuthEvent {
	return predicate.UserAuthEvent(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserAuthEvent) predicate.UserAuthEvent {
	return predicate.UserAuthEvent(sql.NotPredicates(p))
}
