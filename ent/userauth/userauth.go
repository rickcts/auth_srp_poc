// Code generated by ent, DO NOT EDIT.

package userauth

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the userauth type in the database.
	Label = "user_auth"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldAuthExtras holds the string denoting the auth_extras field in the database.
	FieldAuthExtras = "auth_extras"
	// FieldAuthProvider holds the string denoting the auth_provider field in the database.
	FieldAuthProvider = "auth_provider"
	// FieldAuthID holds the string denoting the auth_id field in the database.
	FieldAuthID = "auth_id"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the userauth in the database.
	Table = "user_auths"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "user_auths"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
)

// Columns holds all SQL columns for userauth fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldAuthExtras,
	FieldAuthProvider,
	FieldAuthID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the UserAuth queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByAuthExtras orders the results by the auth_extras field.
func ByAuthExtras(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAuthExtras, opts...).ToFunc()
}

// ByAuthProvider orders the results by the auth_provider field.
func ByAuthProvider(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAuthProvider, opts...).ToFunc()
}

// ByAuthID orders the results by the auth_id field.
func ByAuthID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAuthID, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
