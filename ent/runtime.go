// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/SimpnicServerTeam/scs-aaa-server/ent/schema"
	"github.com/SimpnicServerTeam/scs-aaa-server/ent/user"
	"github.com/SimpnicServerTeam/scs-aaa-server/ent/useraccessevent"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescDisplayName is the schema descriptor for display_name field.
	userDescDisplayName := userFields[1].Descriptor()
	// user.DisplayNameValidator is a validator for the "display_name" field. It is called by the builders before save.
	user.DisplayNameValidator = userDescDisplayName.Validators[0].(func(string) error)
	// userDescState is the schema descriptor for state field.
	userDescState := userFields[2].Descriptor()
	// user.StateValidator is a validator for the "state" field. It is called by the builders before save.
	user.StateValidator = userDescState.Validators[0].(func(string) error)
	// userDescCreatedAt is the schema descriptor for created_at field.
	userDescCreatedAt := userFields[4].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the created_at field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(func() time.Time)
	// userDescUpdatedAt is the schema descriptor for updated_at field.
	userDescUpdatedAt := userFields[5].Descriptor()
	// user.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	user.DefaultUpdatedAt = userDescUpdatedAt.Default.(func() time.Time)
	// user.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	user.UpdateDefaultUpdatedAt = userDescUpdatedAt.UpdateDefault.(func() time.Time)
	useraccesseventFields := schema.UserAccessEvent{}.Fields()
	_ = useraccesseventFields
	// useraccesseventDescHostFrom is the schema descriptor for host_from field.
	useraccesseventDescHostFrom := useraccesseventFields[1].Descriptor()
	// useraccessevent.HostFromValidator is a validator for the "host_from" field. It is called by the builders before save.
	useraccessevent.HostFromValidator = func() func(string) error {
		validators := useraccesseventDescHostFrom.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(host_from string) error {
			for _, fn := range fns {
				if err := fn(host_from); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// useraccesseventDescAPIMethod is the schema descriptor for api_method field.
	useraccesseventDescAPIMethod := useraccesseventFields[2].Descriptor()
	// useraccessevent.APIMethodValidator is a validator for the "api_method" field. It is called by the builders before save.
	useraccessevent.APIMethodValidator = func() func(string) error {
		validators := useraccesseventDescAPIMethod.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(api_method string) error {
			for _, fn := range fns {
				if err := fn(api_method); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// useraccesseventDescAPIPath is the schema descriptor for api_path field.
	useraccesseventDescAPIPath := useraccesseventFields[3].Descriptor()
	// useraccessevent.APIPathValidator is a validator for the "api_path" field. It is called by the builders before save.
	useraccessevent.APIPathValidator = func() func(string) error {
		validators := useraccesseventDescAPIPath.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(api_path string) error {
			for _, fn := range fns {
				if err := fn(api_path); err != nil {
					return err
				}
			}
			return nil
		}
	}()
}
