// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/SimpnicServerTeam/scs-aaa-server/ent/predicate"
	"github.com/SimpnicServerTeam/scs-aaa-server/ent/user"
	"github.com/SimpnicServerTeam/scs-aaa-server/ent/useraccessevent"
)

// UserAccessEventUpdate is the builder for updating UserAccessEvent entities.
type UserAccessEventUpdate struct {
	config
	hooks    []Hook
	mutation *UserAccessEventMutation
}

// Where appends a list predicates to the UserAccessEventUpdate builder.
func (uaeu *UserAccessEventUpdate) Where(ps ...predicate.UserAccessEvent) *UserAccessEventUpdate {
	uaeu.mutation.Where(ps...)
	return uaeu
}

// SetUserID sets the "user_id" field.
func (uaeu *UserAccessEventUpdate) SetUserID(i int64) *UserAccessEventUpdate {
	uaeu.mutation.SetUserID(i)
	return uaeu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (uaeu *UserAccessEventUpdate) SetNillableUserID(i *int64) *UserAccessEventUpdate {
	if i != nil {
		uaeu.SetUserID(*i)
	}
	return uaeu
}

// SetHostFrom sets the "host_from" field.
func (uaeu *UserAccessEventUpdate) SetHostFrom(s string) *UserAccessEventUpdate {
	uaeu.mutation.SetHostFrom(s)
	return uaeu
}

// SetNillableHostFrom sets the "host_from" field if the given value is not nil.
func (uaeu *UserAccessEventUpdate) SetNillableHostFrom(s *string) *UserAccessEventUpdate {
	if s != nil {
		uaeu.SetHostFrom(*s)
	}
	return uaeu
}

// SetAPIMethod sets the "api_method" field.
func (uaeu *UserAccessEventUpdate) SetAPIMethod(s string) *UserAccessEventUpdate {
	uaeu.mutation.SetAPIMethod(s)
	return uaeu
}

// SetNillableAPIMethod sets the "api_method" field if the given value is not nil.
func (uaeu *UserAccessEventUpdate) SetNillableAPIMethod(s *string) *UserAccessEventUpdate {
	if s != nil {
		uaeu.SetAPIMethod(*s)
	}
	return uaeu
}

// SetAPIPath sets the "api_path" field.
func (uaeu *UserAccessEventUpdate) SetAPIPath(s string) *UserAccessEventUpdate {
	uaeu.mutation.SetAPIPath(s)
	return uaeu
}

// SetNillableAPIPath sets the "api_path" field if the given value is not nil.
func (uaeu *UserAccessEventUpdate) SetNillableAPIPath(s *string) *UserAccessEventUpdate {
	if s != nil {
		uaeu.SetAPIPath(*s)
	}
	return uaeu
}

// SetAPIPathExtras sets the "api_path_extras" field.
func (uaeu *UserAccessEventUpdate) SetAPIPathExtras(s string) *UserAccessEventUpdate {
	uaeu.mutation.SetAPIPathExtras(s)
	return uaeu
}

// SetNillableAPIPathExtras sets the "api_path_extras" field if the given value is not nil.
func (uaeu *UserAccessEventUpdate) SetNillableAPIPathExtras(s *string) *UserAccessEventUpdate {
	if s != nil {
		uaeu.SetAPIPathExtras(*s)
	}
	return uaeu
}

// SetResponseCode sets the "response_code" field.
func (uaeu *UserAccessEventUpdate) SetResponseCode(i int) *UserAccessEventUpdate {
	uaeu.mutation.ResetResponseCode()
	uaeu.mutation.SetResponseCode(i)
	return uaeu
}

// SetNillableResponseCode sets the "response_code" field if the given value is not nil.
func (uaeu *UserAccessEventUpdate) SetNillableResponseCode(i *int) *UserAccessEventUpdate {
	if i != nil {
		uaeu.SetResponseCode(*i)
	}
	return uaeu
}

// AddResponseCode adds i to the "response_code" field.
func (uaeu *UserAccessEventUpdate) AddResponseCode(i int) *UserAccessEventUpdate {
	uaeu.mutation.AddResponseCode(i)
	return uaeu
}

// SetUpdatedAt sets the "updated_at" field.
func (uaeu *UserAccessEventUpdate) SetUpdatedAt(t time.Time) *UserAccessEventUpdate {
	uaeu.mutation.SetUpdatedAt(t)
	return uaeu
}

// SetUser sets the "user" edge to the User entity.
func (uaeu *UserAccessEventUpdate) SetUser(u *User) *UserAccessEventUpdate {
	return uaeu.SetUserID(u.ID)
}

// Mutation returns the UserAccessEventMutation object of the builder.
func (uaeu *UserAccessEventUpdate) Mutation() *UserAccessEventMutation {
	return uaeu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (uaeu *UserAccessEventUpdate) ClearUser() *UserAccessEventUpdate {
	uaeu.mutation.ClearUser()
	return uaeu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uaeu *UserAccessEventUpdate) Save(ctx context.Context) (int, error) {
	uaeu.defaults()
	return withHooks(ctx, uaeu.sqlSave, uaeu.mutation, uaeu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uaeu *UserAccessEventUpdate) SaveX(ctx context.Context) int {
	affected, err := uaeu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uaeu *UserAccessEventUpdate) Exec(ctx context.Context) error {
	_, err := uaeu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uaeu *UserAccessEventUpdate) ExecX(ctx context.Context) {
	if err := uaeu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uaeu *UserAccessEventUpdate) defaults() {
	if _, ok := uaeu.mutation.UpdatedAt(); !ok {
		v := useraccessevent.UpdateDefaultUpdatedAt()
		uaeu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uaeu *UserAccessEventUpdate) check() error {
	if v, ok := uaeu.mutation.HostFrom(); ok {
		if err := useraccessevent.HostFromValidator(v); err != nil {
			return &ValidationError{Name: "host_from", err: fmt.Errorf(`ent: validator failed for field "UserAccessEvent.host_from": %w`, err)}
		}
	}
	if v, ok := uaeu.mutation.APIMethod(); ok {
		if err := useraccessevent.APIMethodValidator(v); err != nil {
			return &ValidationError{Name: "api_method", err: fmt.Errorf(`ent: validator failed for field "UserAccessEvent.api_method": %w`, err)}
		}
	}
	if v, ok := uaeu.mutation.APIPath(); ok {
		if err := useraccessevent.APIPathValidator(v); err != nil {
			return &ValidationError{Name: "api_path", err: fmt.Errorf(`ent: validator failed for field "UserAccessEvent.api_path": %w`, err)}
		}
	}
	if uaeu.mutation.UserCleared() && len(uaeu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserAccessEvent.user"`)
	}
	return nil
}

func (uaeu *UserAccessEventUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uaeu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(useraccessevent.Table, useraccessevent.Columns, sqlgraph.NewFieldSpec(useraccessevent.FieldID, field.TypeInt))
	if ps := uaeu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uaeu.mutation.HostFrom(); ok {
		_spec.SetField(useraccessevent.FieldHostFrom, field.TypeString, value)
	}
	if value, ok := uaeu.mutation.APIMethod(); ok {
		_spec.SetField(useraccessevent.FieldAPIMethod, field.TypeString, value)
	}
	if value, ok := uaeu.mutation.APIPath(); ok {
		_spec.SetField(useraccessevent.FieldAPIPath, field.TypeString, value)
	}
	if value, ok := uaeu.mutation.APIPathExtras(); ok {
		_spec.SetField(useraccessevent.FieldAPIPathExtras, field.TypeString, value)
	}
	if value, ok := uaeu.mutation.ResponseCode(); ok {
		_spec.SetField(useraccessevent.FieldResponseCode, field.TypeInt, value)
	}
	if value, ok := uaeu.mutation.AddedResponseCode(); ok {
		_spec.AddField(useraccessevent.FieldResponseCode, field.TypeInt, value)
	}
	if value, ok := uaeu.mutation.UpdatedAt(); ok {
		_spec.SetField(useraccessevent.FieldUpdatedAt, field.TypeTime, value)
	}
	if uaeu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   useraccessevent.UserTable,
			Columns: []string{useraccessevent.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uaeu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   useraccessevent.UserTable,
			Columns: []string{useraccessevent.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uaeu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{useraccessevent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uaeu.mutation.done = true
	return n, nil
}

// UserAccessEventUpdateOne is the builder for updating a single UserAccessEvent entity.
type UserAccessEventUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserAccessEventMutation
}

// SetUserID sets the "user_id" field.
func (uaeuo *UserAccessEventUpdateOne) SetUserID(i int64) *UserAccessEventUpdateOne {
	uaeuo.mutation.SetUserID(i)
	return uaeuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (uaeuo *UserAccessEventUpdateOne) SetNillableUserID(i *int64) *UserAccessEventUpdateOne {
	if i != nil {
		uaeuo.SetUserID(*i)
	}
	return uaeuo
}

// SetHostFrom sets the "host_from" field.
func (uaeuo *UserAccessEventUpdateOne) SetHostFrom(s string) *UserAccessEventUpdateOne {
	uaeuo.mutation.SetHostFrom(s)
	return uaeuo
}

// SetNillableHostFrom sets the "host_from" field if the given value is not nil.
func (uaeuo *UserAccessEventUpdateOne) SetNillableHostFrom(s *string) *UserAccessEventUpdateOne {
	if s != nil {
		uaeuo.SetHostFrom(*s)
	}
	return uaeuo
}

// SetAPIMethod sets the "api_method" field.
func (uaeuo *UserAccessEventUpdateOne) SetAPIMethod(s string) *UserAccessEventUpdateOne {
	uaeuo.mutation.SetAPIMethod(s)
	return uaeuo
}

// SetNillableAPIMethod sets the "api_method" field if the given value is not nil.
func (uaeuo *UserAccessEventUpdateOne) SetNillableAPIMethod(s *string) *UserAccessEventUpdateOne {
	if s != nil {
		uaeuo.SetAPIMethod(*s)
	}
	return uaeuo
}

// SetAPIPath sets the "api_path" field.
func (uaeuo *UserAccessEventUpdateOne) SetAPIPath(s string) *UserAccessEventUpdateOne {
	uaeuo.mutation.SetAPIPath(s)
	return uaeuo
}

// SetNillableAPIPath sets the "api_path" field if the given value is not nil.
func (uaeuo *UserAccessEventUpdateOne) SetNillableAPIPath(s *string) *UserAccessEventUpdateOne {
	if s != nil {
		uaeuo.SetAPIPath(*s)
	}
	return uaeuo
}

// SetAPIPathExtras sets the "api_path_extras" field.
func (uaeuo *UserAccessEventUpdateOne) SetAPIPathExtras(s string) *UserAccessEventUpdateOne {
	uaeuo.mutation.SetAPIPathExtras(s)
	return uaeuo
}

// SetNillableAPIPathExtras sets the "api_path_extras" field if the given value is not nil.
func (uaeuo *UserAccessEventUpdateOne) SetNillableAPIPathExtras(s *string) *UserAccessEventUpdateOne {
	if s != nil {
		uaeuo.SetAPIPathExtras(*s)
	}
	return uaeuo
}

// SetResponseCode sets the "response_code" field.
func (uaeuo *UserAccessEventUpdateOne) SetResponseCode(i int) *UserAccessEventUpdateOne {
	uaeuo.mutation.ResetResponseCode()
	uaeuo.mutation.SetResponseCode(i)
	return uaeuo
}

// SetNillableResponseCode sets the "response_code" field if the given value is not nil.
func (uaeuo *UserAccessEventUpdateOne) SetNillableResponseCode(i *int) *UserAccessEventUpdateOne {
	if i != nil {
		uaeuo.SetResponseCode(*i)
	}
	return uaeuo
}

// AddResponseCode adds i to the "response_code" field.
func (uaeuo *UserAccessEventUpdateOne) AddResponseCode(i int) *UserAccessEventUpdateOne {
	uaeuo.mutation.AddResponseCode(i)
	return uaeuo
}

// SetUpdatedAt sets the "updated_at" field.
func (uaeuo *UserAccessEventUpdateOne) SetUpdatedAt(t time.Time) *UserAccessEventUpdateOne {
	uaeuo.mutation.SetUpdatedAt(t)
	return uaeuo
}

// SetUser sets the "user" edge to the User entity.
func (uaeuo *UserAccessEventUpdateOne) SetUser(u *User) *UserAccessEventUpdateOne {
	return uaeuo.SetUserID(u.ID)
}

// Mutation returns the UserAccessEventMutation object of the builder.
func (uaeuo *UserAccessEventUpdateOne) Mutation() *UserAccessEventMutation {
	return uaeuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (uaeuo *UserAccessEventUpdateOne) ClearUser() *UserAccessEventUpdateOne {
	uaeuo.mutation.ClearUser()
	return uaeuo
}

// Where appends a list predicates to the UserAccessEventUpdate builder.
func (uaeuo *UserAccessEventUpdateOne) Where(ps ...predicate.UserAccessEvent) *UserAccessEventUpdateOne {
	uaeuo.mutation.Where(ps...)
	return uaeuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uaeuo *UserAccessEventUpdateOne) Select(field string, fields ...string) *UserAccessEventUpdateOne {
	uaeuo.fields = append([]string{field}, fields...)
	return uaeuo
}

// Save executes the query and returns the updated UserAccessEvent entity.
func (uaeuo *UserAccessEventUpdateOne) Save(ctx context.Context) (*UserAccessEvent, error) {
	uaeuo.defaults()
	return withHooks(ctx, uaeuo.sqlSave, uaeuo.mutation, uaeuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uaeuo *UserAccessEventUpdateOne) SaveX(ctx context.Context) *UserAccessEvent {
	node, err := uaeuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uaeuo *UserAccessEventUpdateOne) Exec(ctx context.Context) error {
	_, err := uaeuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uaeuo *UserAccessEventUpdateOne) ExecX(ctx context.Context) {
	if err := uaeuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uaeuo *UserAccessEventUpdateOne) defaults() {
	if _, ok := uaeuo.mutation.UpdatedAt(); !ok {
		v := useraccessevent.UpdateDefaultUpdatedAt()
		uaeuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uaeuo *UserAccessEventUpdateOne) check() error {
	if v, ok := uaeuo.mutation.HostFrom(); ok {
		if err := useraccessevent.HostFromValidator(v); err != nil {
			return &ValidationError{Name: "host_from", err: fmt.Errorf(`ent: validator failed for field "UserAccessEvent.host_from": %w`, err)}
		}
	}
	if v, ok := uaeuo.mutation.APIMethod(); ok {
		if err := useraccessevent.APIMethodValidator(v); err != nil {
			return &ValidationError{Name: "api_method", err: fmt.Errorf(`ent: validator failed for field "UserAccessEvent.api_method": %w`, err)}
		}
	}
	if v, ok := uaeuo.mutation.APIPath(); ok {
		if err := useraccessevent.APIPathValidator(v); err != nil {
			return &ValidationError{Name: "api_path", err: fmt.Errorf(`ent: validator failed for field "UserAccessEvent.api_path": %w`, err)}
		}
	}
	if uaeuo.mutation.UserCleared() && len(uaeuo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserAccessEvent.user"`)
	}
	return nil
}

func (uaeuo *UserAccessEventUpdateOne) sqlSave(ctx context.Context) (_node *UserAccessEvent, err error) {
	if err := uaeuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(useraccessevent.Table, useraccessevent.Columns, sqlgraph.NewFieldSpec(useraccessevent.FieldID, field.TypeInt))
	id, ok := uaeuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserAccessEvent.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uaeuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, useraccessevent.FieldID)
		for _, f := range fields {
			if !useraccessevent.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != useraccessevent.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uaeuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uaeuo.mutation.HostFrom(); ok {
		_spec.SetField(useraccessevent.FieldHostFrom, field.TypeString, value)
	}
	if value, ok := uaeuo.mutation.APIMethod(); ok {
		_spec.SetField(useraccessevent.FieldAPIMethod, field.TypeString, value)
	}
	if value, ok := uaeuo.mutation.APIPath(); ok {
		_spec.SetField(useraccessevent.FieldAPIPath, field.TypeString, value)
	}
	if value, ok := uaeuo.mutation.APIPathExtras(); ok {
		_spec.SetField(useraccessevent.FieldAPIPathExtras, field.TypeString, value)
	}
	if value, ok := uaeuo.mutation.ResponseCode(); ok {
		_spec.SetField(useraccessevent.FieldResponseCode, field.TypeInt, value)
	}
	if value, ok := uaeuo.mutation.AddedResponseCode(); ok {
		_spec.AddField(useraccessevent.FieldResponseCode, field.TypeInt, value)
	}
	if value, ok := uaeuo.mutation.UpdatedAt(); ok {
		_spec.SetField(useraccessevent.FieldUpdatedAt, field.TypeTime, value)
	}
	if uaeuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   useraccessevent.UserTable,
			Columns: []string{useraccessevent.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uaeuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   useraccessevent.UserTable,
			Columns: []string{useraccessevent.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserAccessEvent{config: uaeuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uaeuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{useraccessevent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uaeuo.mutation.done = true
	return _node, nil
}
