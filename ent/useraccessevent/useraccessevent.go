// Code generated by ent, DO NOT EDIT.

package useraccessevent

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the useraccessevent type in the database.
	Label = "user_access_event"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldHostFrom holds the string denoting the host_from field in the database.
	FieldHostFrom = "host_from"
	// FieldAPIMethod holds the string denoting the api_method field in the database.
	FieldAPIMethod = "api_method"
	// FieldAPIPath holds the string denoting the api_path field in the database.
	FieldAPIPath = "api_path"
	// FieldAPIPathExtras holds the string denoting the api_path_extras field in the database.
	FieldAPIPathExtras = "api_path_extras"
	// FieldResponseCode holds the string denoting the response_code field in the database.
	FieldResponseCode = "response_code"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the useraccessevent in the database.
	Table = "user_access_events"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "user_access_events"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
)

// Columns holds all SQL columns for useraccessevent fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldHostFrom,
	FieldAPIMethod,
	FieldAPIPath,
	FieldAPIPathExtras,
	FieldResponseCode,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// HostFromValidator is a validator for the "host_from" field. It is called by the builders before save.
	HostFromValidator func(string) error
	// APIMethodValidator is a validator for the "api_method" field. It is called by the builders before save.
	APIMethodValidator func(string) error
	// APIPathValidator is a validator for the "api_path" field. It is called by the builders before save.
	APIPathValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the UserAccessEvent queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByHostFrom orders the results by the host_from field.
func ByHostFrom(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHostFrom, opts...).ToFunc()
}

// ByAPIMethod orders the results by the api_method field.
func ByAPIMethod(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAPIMethod, opts...).ToFunc()
}

// ByAPIPath orders the results by the api_path field.
func ByAPIPath(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAPIPath, opts...).ToFunc()
}

// ByAPIPathExtras orders the results by the api_path_extras field.
func ByAPIPathExtras(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAPIPathExtras, opts...).ToFunc()
}

// ByResponseCode orders the results by the response_code field.
func ByResponseCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResponseCode, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
