// Code generated by ent, DO NOT EDIT.

package useraccessevent

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/SimpnicServerTeam/scs-aaa-server/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int64) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldEQ(FieldUserID, v))
}

// HostFrom applies equality check predicate on the "host_from" field. It's identical to HostFromEQ.
func HostFrom(v string) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldEQ(FieldHostFrom, v))
}

// APIMethod applies equality check predicate on the "api_method" field. It's identical to APIMethodEQ.
func APIMethod(v string) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldEQ(FieldAPIMethod, v))
}

// APIPath applies equality check predicate on the "api_path" field. It's identical to APIPathEQ.
func APIPath(v string) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldEQ(FieldAPIPath, v))
}

// APIPathExtras applies equality check predicate on the "api_path_extras" field. It's identical to APIPathExtrasEQ.
func APIPathExtras(v string) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldEQ(FieldAPIPathExtras, v))
}

// ResponseCode applies equality check predicate on the "response_code" field. It's identical to ResponseCodeEQ.
func ResponseCode(v int) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldEQ(FieldResponseCode, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldEQ(FieldUpdatedAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int64) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int64) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int64) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int64) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldNotIn(FieldUserID, vs...))
}

// HostFromEQ applies the EQ predicate on the "host_from" field.
func HostFromEQ(v string) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldEQ(FieldHostFrom, v))
}

// HostFromNEQ applies the NEQ predicate on the "host_from" field.
func HostFromNEQ(v string) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldNEQ(FieldHostFrom, v))
}

// HostFromIn applies the In predicate on the "host_from" field.
func HostFromIn(vs ...string) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldIn(FieldHostFrom, vs...))
}

// HostFromNotIn applies the NotIn predicate on the "host_from" field.
func HostFromNotIn(vs ...string) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldNotIn(FieldHostFrom, vs...))
}

// HostFromGT applies the GT predicate on the "host_from" field.
func HostFromGT(v string) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldGT(FieldHostFrom, v))
}

// HostFromGTE applies the GTE predicate on the "host_from" field.
func HostFromGTE(v string) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldGTE(FieldHostFrom, v))
}

// HostFromLT applies the LT predicate on the "host_from" field.
func HostFromLT(v string) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldLT(FieldHostFrom, v))
}

// HostFromLTE applies the LTE predicate on the "host_from" field.
func HostFromLTE(v string) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldLTE(FieldHostFrom, v))
}

// HostFromContains applies the Contains predicate on the "host_from" field.
func HostFromContains(v string) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldContains(FieldHostFrom, v))
}

// HostFromHasPrefix applies the HasPrefix predicate on the "host_from" field.
func HostFromHasPrefix(v string) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldHasPrefix(FieldHostFrom, v))
}

// HostFromHasSuffix applies the HasSuffix predicate on the "host_from" field.
func HostFromHasSuffix(v string) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldHasSuffix(FieldHostFrom, v))
}

// HostFromEqualFold applies the EqualFold predicate on the "host_from" field.
func HostFromEqualFold(v string) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldEqualFold(FieldHostFrom, v))
}

// HostFromContainsFold applies the ContainsFold predicate on the "host_from" field.
func HostFromContainsFold(v string) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldContainsFold(FieldHostFrom, v))
}

// APIMethodEQ applies the EQ predicate on the "api_method" field.
func APIMethodEQ(v string) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldEQ(FieldAPIMethod, v))
}

// APIMethodNEQ applies the NEQ predicate on the "api_method" field.
func APIMethodNEQ(v string) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldNEQ(FieldAPIMethod, v))
}

// APIMethodIn applies the In predicate on the "api_method" field.
func APIMethodIn(vs ...string) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldIn(FieldAPIMethod, vs...))
}

// APIMethodNotIn applies the NotIn predicate on the "api_method" field.
func APIMethodNotIn(vs ...string) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldNotIn(FieldAPIMethod, vs...))
}

// APIMethodGT applies the GT predicate on the "api_method" field.
func APIMethodGT(v string) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldGT(FieldAPIMethod, v))
}

// APIMethodGTE applies the GTE predicate on the "api_method" field.
func APIMethodGTE(v string) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldGTE(FieldAPIMethod, v))
}

// APIMethodLT applies the LT predicate on the "api_method" field.
func APIMethodLT(v string) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldLT(FieldAPIMethod, v))
}

// APIMethodLTE applies the LTE predicate on the "api_method" field.
func APIMethodLTE(v string) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldLTE(FieldAPIMethod, v))
}

// APIMethodContains applies the Contains predicate on the "api_method" field.
func APIMethodContains(v string) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldContains(FieldAPIMethod, v))
}

// APIMethodHasPrefix applies the HasPrefix predicate on the "api_method" field.
func APIMethodHasPrefix(v string) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldHasPrefix(FieldAPIMethod, v))
}

// APIMethodHasSuffix applies the HasSuffix predicate on the "api_method" field.
func APIMethodHasSuffix(v string) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldHasSuffix(FieldAPIMethod, v))
}

// APIMethodEqualFold applies the EqualFold predicate on the "api_method" field.
func APIMethodEqualFold(v string) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldEqualFold(FieldAPIMethod, v))
}

// APIMethodContainsFold applies the ContainsFold predicate on the "api_method" field.
func APIMethodContainsFold(v string) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldContainsFold(FieldAPIMethod, v))
}

// APIPathEQ applies the EQ predicate on the "api_path" field.
func APIPathEQ(v string) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldEQ(FieldAPIPath, v))
}

// APIPathNEQ applies the NEQ predicate on the "api_path" field.
func APIPathNEQ(v string) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldNEQ(FieldAPIPath, v))
}

// APIPathIn applies the In predicate on the "api_path" field.
func APIPathIn(vs ...string) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldIn(FieldAPIPath, vs...))
}

// APIPathNotIn applies the NotIn predicate on the "api_path" field.
func APIPathNotIn(vs ...string) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldNotIn(FieldAPIPath, vs...))
}

// APIPathGT applies the GT predicate on the "api_path" field.
func APIPathGT(v string) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldGT(FieldAPIPath, v))
}

// APIPathGTE applies the GTE predicate on the "api_path" field.
func APIPathGTE(v string) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldGTE(FieldAPIPath, v))
}

// APIPathLT applies the LT predicate on the "api_path" field.
func APIPathLT(v string) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldLT(FieldAPIPath, v))
}

// APIPathLTE applies the LTE predicate on the "api_path" field.
func APIPathLTE(v string) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldLTE(FieldAPIPath, v))
}

// APIPathContains applies the Contains predicate on the "api_path" field.
func APIPathContains(v string) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldContains(FieldAPIPath, v))
}

// APIPathHasPrefix applies the HasPrefix predicate on the "api_path" field.
func APIPathHasPrefix(v string) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldHasPrefix(FieldAPIPath, v))
}

// APIPathHasSuffix applies the HasSuffix predicate on the "api_path" field.
func APIPathHasSuffix(v string) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldHasSuffix(FieldAPIPath, v))
}

// APIPathEqualFold applies the EqualFold predicate on the "api_path" field.
func APIPathEqualFold(v string) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldEqualFold(FieldAPIPath, v))
}

// APIPathContainsFold applies the ContainsFold predicate on the "api_path" field.
func APIPathContainsFold(v string) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldContainsFold(FieldAPIPath, v))
}

// APIPathExtrasEQ applies the EQ predicate on the "api_path_extras" field.
func APIPathExtrasEQ(v string) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldEQ(FieldAPIPathExtras, v))
}

// APIPathExtrasNEQ applies the NEQ predicate on the "api_path_extras" field.
func APIPathExtrasNEQ(v string) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldNEQ(FieldAPIPathExtras, v))
}

// APIPathExtrasIn applies the In predicate on the "api_path_extras" field.
func APIPathExtrasIn(vs ...string) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldIn(FieldAPIPathExtras, vs...))
}

// APIPathExtrasNotIn applies the NotIn predicate on the "api_path_extras" field.
func APIPathExtrasNotIn(vs ...string) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldNotIn(FieldAPIPathExtras, vs...))
}

// APIPathExtrasGT applies the GT predicate on the "api_path_extras" field.
func APIPathExtrasGT(v string) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldGT(FieldAPIPathExtras, v))
}

// APIPathExtrasGTE applies the GTE predicate on the "api_path_extras" field.
func APIPathExtrasGTE(v string) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldGTE(FieldAPIPathExtras, v))
}

// APIPathExtrasLT applies the LT predicate on the "api_path_extras" field.
func APIPathExtrasLT(v string) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldLT(FieldAPIPathExtras, v))
}

// APIPathExtrasLTE applies the LTE predicate on the "api_path_extras" field.
func APIPathExtrasLTE(v string) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldLTE(FieldAPIPathExtras, v))
}

// APIPathExtrasContains applies the Contains predicate on the "api_path_extras" field.
func APIPathExtrasContains(v string) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldContains(FieldAPIPathExtras, v))
}

// APIPathExtrasHasPrefix applies the HasPrefix predicate on the "api_path_extras" field.
func APIPathExtrasHasPrefix(v string) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldHasPrefix(FieldAPIPathExtras, v))
}

// APIPathExtrasHasSuffix applies the HasSuffix predicate on the "api_path_extras" field.
func APIPathExtrasHasSuffix(v string) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldHasSuffix(FieldAPIPathExtras, v))
}

// APIPathExtrasEqualFold applies the EqualFold predicate on the "api_path_extras" field.
func APIPathExtrasEqualFold(v string) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldEqualFold(FieldAPIPathExtras, v))
}

// APIPathExtrasContainsFold applies the ContainsFold predicate on the "api_path_extras" field.
func APIPathExtrasContainsFold(v string) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldContainsFold(FieldAPIPathExtras, v))
}

// ResponseCodeEQ applies the EQ predicate on the "response_code" field.
func ResponseCodeEQ(v int) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldEQ(FieldResponseCode, v))
}

// ResponseCodeNEQ applies the NEQ predicate on the "response_code" field.
func ResponseCodeNEQ(v int) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldNEQ(FieldResponseCode, v))
}

// ResponseCodeIn applies the In predicate on the "response_code" field.
func ResponseCodeIn(vs ...int) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldIn(FieldResponseCode, vs...))
}

// ResponseCodeNotIn applies the NotIn predicate on the "response_code" field.
func ResponseCodeNotIn(vs ...int) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldNotIn(FieldResponseCode, vs...))
}

// ResponseCodeGT applies the GT predicate on the "response_code" field.
func ResponseCodeGT(v int) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldGT(FieldResponseCode, v))
}

// ResponseCodeGTE applies the GTE predicate on the "response_code" field.
func ResponseCodeGTE(v int) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldGTE(FieldResponseCode, v))
}

// ResponseCodeLT applies the LT predicate on the "response_code" field.
func ResponseCodeLT(v int) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldLT(FieldResponseCode, v))
}

// ResponseCodeLTE applies the LTE predicate on the "response_code" field.
func ResponseCodeLTE(v int) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldLTE(FieldResponseCode, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.UserAccessEvent {
	return predicate.UserAccessEvent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserAccessEvent) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserAccessEvent) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserAccessEvent) predicate.UserAccessEvent {
	return predicate.UserAccessEvent(sql.NotPredicates(p))
}
