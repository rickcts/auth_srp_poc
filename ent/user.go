// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/SimpnicServerTeam/scs-aaa-server/ent/user"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// DisplayName holds the value of the "display_name" field.
	DisplayName string `json:"display_name,omitempty"`
	// State holds the value of the "state" field.
	State string `json:"state,omitempty"`
	// ActivatedAt holds the value of the "activated_at" field.
	ActivatedAt time.Time `json:"activated_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges        UserEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// UserAuth holds the value of the userAuth edge.
	UserAuth []*UserAuth `json:"userAuth,omitempty"`
	// UserMFA holds the value of the userMFA edge.
	UserMFA []*UserMFA `json:"userMFA,omitempty"`
	// UserAccessEvent holds the value of the userAccessEvent edge.
	UserAccessEvent []*UserAccessEvent `json:"userAccessEvent,omitempty"`
	// UserAuthEvent holds the value of the userAuthEvent edge.
	UserAuthEvent []*UserAuthEvent `json:"userAuthEvent,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// UserAuthOrErr returns the UserAuth value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) UserAuthOrErr() ([]*UserAuth, error) {
	if e.loadedTypes[0] {
		return e.UserAuth, nil
	}
	return nil, &NotLoadedError{edge: "userAuth"}
}

// UserMFAOrErr returns the UserMFA value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) UserMFAOrErr() ([]*UserMFA, error) {
	if e.loadedTypes[1] {
		return e.UserMFA, nil
	}
	return nil, &NotLoadedError{edge: "userMFA"}
}

// UserAccessEventOrErr returns the UserAccessEvent value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) UserAccessEventOrErr() ([]*UserAccessEvent, error) {
	if e.loadedTypes[2] {
		return e.UserAccessEvent, nil
	}
	return nil, &NotLoadedError{edge: "userAccessEvent"}
}

// UserAuthEventOrErr returns the UserAuthEvent value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) UserAuthEventOrErr() ([]*UserAuthEvent, error) {
	if e.loadedTypes[3] {
		return e.UserAuthEvent, nil
	}
	return nil, &NotLoadedError{edge: "userAuthEvent"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			values[i] = new(sql.NullInt64)
		case user.FieldDisplayName, user.FieldState:
			values[i] = new(sql.NullString)
		case user.FieldActivatedAt, user.FieldCreatedAt, user.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			u.ID = int64(value.Int64)
		case user.FieldDisplayName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_name", values[i])
			} else if value.Valid {
				u.DisplayName = value.String
			}
		case user.FieldState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				u.State = value.String
			}
		case user.FieldActivatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field activated_at", values[i])
			} else if value.Valid {
				u.ActivatedAt = value.Time
			}
		case user.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				u.CreatedAt = value.Time
			}
		case user.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				u.UpdatedAt = value.Time
			}
		default:
			u.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the User.
// This includes values selected through modifiers, order, etc.
func (u *User) Value(name string) (ent.Value, error) {
	return u.selectValues.Get(name)
}

// QueryUserAuth queries the "userAuth" edge of the User entity.
func (u *User) QueryUserAuth() *UserAuthQuery {
	return NewUserClient(u.config).QueryUserAuth(u)
}

// QueryUserMFA queries the "userMFA" edge of the User entity.
func (u *User) QueryUserMFA() *UserMFAQuery {
	return NewUserClient(u.config).QueryUserMFA(u)
}

// QueryUserAccessEvent queries the "userAccessEvent" edge of the User entity.
func (u *User) QueryUserAccessEvent() *UserAccessEventQuery {
	return NewUserClient(u.config).QueryUserAccessEvent(u)
}

// QueryUserAuthEvent queries the "userAuthEvent" edge of the User entity.
func (u *User) QueryUserAuthEvent() *UserAuthEventQuery {
	return NewUserClient(u.config).QueryUserAuthEvent(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return NewUserClient(u.config).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("display_name=")
	builder.WriteString(u.DisplayName)
	builder.WriteString(", ")
	builder.WriteString("state=")
	builder.WriteString(u.State)
	builder.WriteString(", ")
	builder.WriteString("activated_at=")
	builder.WriteString(u.ActivatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(u.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(u.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User
