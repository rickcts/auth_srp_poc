// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/SimpnicServerTeam/scs-aaa-server/ent/predicate"
	"github.com/SimpnicServerTeam/scs-aaa-server/ent/user"
	"github.com/SimpnicServerTeam/scs-aaa-server/ent/usermfa"
)

// UserMFAUpdate is the builder for updating UserMFA entities.
type UserMFAUpdate struct {
	config
	hooks    []Hook
	mutation *UserMFAMutation
}

// Where appends a list predicates to the UserMFAUpdate builder.
func (umu *UserMFAUpdate) Where(ps ...predicate.UserMFA) *UserMFAUpdate {
	umu.mutation.Where(ps...)
	return umu
}

// SetUserID sets the "user_id" field.
func (umu *UserMFAUpdate) SetUserID(i int64) *UserMFAUpdate {
	umu.mutation.SetUserID(i)
	return umu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (umu *UserMFAUpdate) SetNillableUserID(i *int64) *UserMFAUpdate {
	if i != nil {
		umu.SetUserID(*i)
	}
	return umu
}

// SetMfaMethod sets the "mfa_method" field.
func (umu *UserMFAUpdate) SetMfaMethod(s string) *UserMFAUpdate {
	umu.mutation.SetMfaMethod(s)
	return umu
}

// SetNillableMfaMethod sets the "mfa_method" field if the given value is not nil.
func (umu *UserMFAUpdate) SetNillableMfaMethod(s *string) *UserMFAUpdate {
	if s != nil {
		umu.SetMfaMethod(*s)
	}
	return umu
}

// SetParams sets the "params" field.
func (umu *UserMFAUpdate) SetParams(s string) *UserMFAUpdate {
	umu.mutation.SetParams(s)
	return umu
}

// SetNillableParams sets the "params" field if the given value is not nil.
func (umu *UserMFAUpdate) SetNillableParams(s *string) *UserMFAUpdate {
	if s != nil {
		umu.SetParams(*s)
	}
	return umu
}

// ClearParams clears the value of the "params" field.
func (umu *UserMFAUpdate) ClearParams() *UserMFAUpdate {
	umu.mutation.ClearParams()
	return umu
}

// SetUpdatedAt sets the "updated_at" field.
func (umu *UserMFAUpdate) SetUpdatedAt(t time.Time) *UserMFAUpdate {
	umu.mutation.SetUpdatedAt(t)
	return umu
}

// SetUser sets the "user" edge to the User entity.
func (umu *UserMFAUpdate) SetUser(u *User) *UserMFAUpdate {
	return umu.SetUserID(u.ID)
}

// Mutation returns the UserMFAMutation object of the builder.
func (umu *UserMFAUpdate) Mutation() *UserMFAMutation {
	return umu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (umu *UserMFAUpdate) ClearUser() *UserMFAUpdate {
	umu.mutation.ClearUser()
	return umu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (umu *UserMFAUpdate) Save(ctx context.Context) (int, error) {
	umu.defaults()
	return withHooks(ctx, umu.sqlSave, umu.mutation, umu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (umu *UserMFAUpdate) SaveX(ctx context.Context) int {
	affected, err := umu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (umu *UserMFAUpdate) Exec(ctx context.Context) error {
	_, err := umu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (umu *UserMFAUpdate) ExecX(ctx context.Context) {
	if err := umu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (umu *UserMFAUpdate) defaults() {
	if _, ok := umu.mutation.UpdatedAt(); !ok {
		v := usermfa.UpdateDefaultUpdatedAt()
		umu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (umu *UserMFAUpdate) check() error {
	if umu.mutation.UserCleared() && len(umu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserMFA.user"`)
	}
	return nil
}

func (umu *UserMFAUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := umu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(usermfa.Table, usermfa.Columns, sqlgraph.NewFieldSpec(usermfa.FieldID, field.TypeInt))
	if ps := umu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := umu.mutation.MfaMethod(); ok {
		_spec.SetField(usermfa.FieldMfaMethod, field.TypeString, value)
	}
	if value, ok := umu.mutation.Params(); ok {
		_spec.SetField(usermfa.FieldParams, field.TypeString, value)
	}
	if umu.mutation.ParamsCleared() {
		_spec.ClearField(usermfa.FieldParams, field.TypeString)
	}
	if value, ok := umu.mutation.UpdatedAt(); ok {
		_spec.SetField(usermfa.FieldUpdatedAt, field.TypeTime, value)
	}
	if umu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usermfa.UserTable,
			Columns: []string{usermfa.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := umu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usermfa.UserTable,
			Columns: []string{usermfa.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, umu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usermfa.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	umu.mutation.done = true
	return n, nil
}

// UserMFAUpdateOne is the builder for updating a single UserMFA entity.
type UserMFAUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMFAMutation
}

// SetUserID sets the "user_id" field.
func (umuo *UserMFAUpdateOne) SetUserID(i int64) *UserMFAUpdateOne {
	umuo.mutation.SetUserID(i)
	return umuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (umuo *UserMFAUpdateOne) SetNillableUserID(i *int64) *UserMFAUpdateOne {
	if i != nil {
		umuo.SetUserID(*i)
	}
	return umuo
}

// SetMfaMethod sets the "mfa_method" field.
func (umuo *UserMFAUpdateOne) SetMfaMethod(s string) *UserMFAUpdateOne {
	umuo.mutation.SetMfaMethod(s)
	return umuo
}

// SetNillableMfaMethod sets the "mfa_method" field if the given value is not nil.
func (umuo *UserMFAUpdateOne) SetNillableMfaMethod(s *string) *UserMFAUpdateOne {
	if s != nil {
		umuo.SetMfaMethod(*s)
	}
	return umuo
}

// SetParams sets the "params" field.
func (umuo *UserMFAUpdateOne) SetParams(s string) *UserMFAUpdateOne {
	umuo.mutation.SetParams(s)
	return umuo
}

// SetNillableParams sets the "params" field if the given value is not nil.
func (umuo *UserMFAUpdateOne) SetNillableParams(s *string) *UserMFAUpdateOne {
	if s != nil {
		umuo.SetParams(*s)
	}
	return umuo
}

// ClearParams clears the value of the "params" field.
func (umuo *UserMFAUpdateOne) ClearParams() *UserMFAUpdateOne {
	umuo.mutation.ClearParams()
	return umuo
}

// SetUpdatedAt sets the "updated_at" field.
func (umuo *UserMFAUpdateOne) SetUpdatedAt(t time.Time) *UserMFAUpdateOne {
	umuo.mutation.SetUpdatedAt(t)
	return umuo
}

// SetUser sets the "user" edge to the User entity.
func (umuo *UserMFAUpdateOne) SetUser(u *User) *UserMFAUpdateOne {
	return umuo.SetUserID(u.ID)
}

// Mutation returns the UserMFAMutation object of the builder.
func (umuo *UserMFAUpdateOne) Mutation() *UserMFAMutation {
	return umuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (umuo *UserMFAUpdateOne) ClearUser() *UserMFAUpdateOne {
	umuo.mutation.ClearUser()
	return umuo
}

// Where appends a list predicates to the UserMFAUpdate builder.
func (umuo *UserMFAUpdateOne) Where(ps ...predicate.UserMFA) *UserMFAUpdateOne {
	umuo.mutation.Where(ps...)
	return umuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (umuo *UserMFAUpdateOne) Select(field string, fields ...string) *UserMFAUpdateOne {
	umuo.fields = append([]string{field}, fields...)
	return umuo
}

// Save executes the query and returns the updated UserMFA entity.
func (umuo *UserMFAUpdateOne) Save(ctx context.Context) (*UserMFA, error) {
	umuo.defaults()
	return withHooks(ctx, umuo.sqlSave, umuo.mutation, umuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (umuo *UserMFAUpdateOne) SaveX(ctx context.Context) *UserMFA {
	node, err := umuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (umuo *UserMFAUpdateOne) Exec(ctx context.Context) error {
	_, err := umuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (umuo *UserMFAUpdateOne) ExecX(ctx context.Context) {
	if err := umuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (umuo *UserMFAUpdateOne) defaults() {
	if _, ok := umuo.mutation.UpdatedAt(); !ok {
		v := usermfa.UpdateDefaultUpdatedAt()
		umuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (umuo *UserMFAUpdateOne) check() error {
	if umuo.mutation.UserCleared() && len(umuo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserMFA.user"`)
	}
	return nil
}

func (umuo *UserMFAUpdateOne) sqlSave(ctx context.Context) (_node *UserMFA, err error) {
	if err := umuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(usermfa.Table, usermfa.Columns, sqlgraph.NewFieldSpec(usermfa.FieldID, field.TypeInt))
	id, ok := umuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserMFA.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := umuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, usermfa.FieldID)
		for _, f := range fields {
			if !usermfa.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != usermfa.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := umuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := umuo.mutation.MfaMethod(); ok {
		_spec.SetField(usermfa.FieldMfaMethod, field.TypeString, value)
	}
	if value, ok := umuo.mutation.Params(); ok {
		_spec.SetField(usermfa.FieldParams, field.TypeString, value)
	}
	if umuo.mutation.ParamsCleared() {
		_spec.ClearField(usermfa.FieldParams, field.TypeString)
	}
	if value, ok := umuo.mutation.UpdatedAt(); ok {
		_spec.SetField(usermfa.FieldUpdatedAt, field.TypeTime, value)
	}
	if umuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usermfa.UserTable,
			Columns: []string{usermfa.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := umuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usermfa.UserTable,
			Columns: []string{usermfa.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserMFA{config: umuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, umuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usermfa.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	umuo.mutation.done = true
	return _node, nil
}
