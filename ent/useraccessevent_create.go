// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/SimpnicServerTeam/scs-aaa-server/ent/user"
	"github.com/SimpnicServerTeam/scs-aaa-server/ent/useraccessevent"
)

// UserAccessEventCreate is the builder for creating a UserAccessEvent entity.
type UserAccessEventCreate struct {
	config
	mutation *UserAccessEventMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (uaec *UserAccessEventCreate) SetUserID(i int64) *UserAccessEventCreate {
	uaec.mutation.SetUserID(i)
	return uaec
}

// SetHostFrom sets the "host_from" field.
func (uaec *UserAccessEventCreate) SetHostFrom(s string) *UserAccessEventCreate {
	uaec.mutation.SetHostFrom(s)
	return uaec
}

// SetAPIMethod sets the "api_method" field.
func (uaec *UserAccessEventCreate) SetAPIMethod(s string) *UserAccessEventCreate {
	uaec.mutation.SetAPIMethod(s)
	return uaec
}

// SetAPIPath sets the "api_path" field.
func (uaec *UserAccessEventCreate) SetAPIPath(s string) *UserAccessEventCreate {
	uaec.mutation.SetAPIPath(s)
	return uaec
}

// SetAPIPathExtras sets the "api_path_extras" field.
func (uaec *UserAccessEventCreate) SetAPIPathExtras(s string) *UserAccessEventCreate {
	uaec.mutation.SetAPIPathExtras(s)
	return uaec
}

// SetResponseCode sets the "response_code" field.
func (uaec *UserAccessEventCreate) SetResponseCode(i int) *UserAccessEventCreate {
	uaec.mutation.SetResponseCode(i)
	return uaec
}

// SetCreatedAt sets the "created_at" field.
func (uaec *UserAccessEventCreate) SetCreatedAt(t time.Time) *UserAccessEventCreate {
	uaec.mutation.SetCreatedAt(t)
	return uaec
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uaec *UserAccessEventCreate) SetNillableCreatedAt(t *time.Time) *UserAccessEventCreate {
	if t != nil {
		uaec.SetCreatedAt(*t)
	}
	return uaec
}

// SetUpdatedAt sets the "updated_at" field.
func (uaec *UserAccessEventCreate) SetUpdatedAt(t time.Time) *UserAccessEventCreate {
	uaec.mutation.SetUpdatedAt(t)
	return uaec
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (uaec *UserAccessEventCreate) SetNillableUpdatedAt(t *time.Time) *UserAccessEventCreate {
	if t != nil {
		uaec.SetUpdatedAt(*t)
	}
	return uaec
}

// SetUser sets the "user" edge to the User entity.
func (uaec *UserAccessEventCreate) SetUser(u *User) *UserAccessEventCreate {
	return uaec.SetUserID(u.ID)
}

// Mutation returns the UserAccessEventMutation object of the builder.
func (uaec *UserAccessEventCreate) Mutation() *UserAccessEventMutation {
	return uaec.mutation
}

// Save creates the UserAccessEvent in the database.
func (uaec *UserAccessEventCreate) Save(ctx context.Context) (*UserAccessEvent, error) {
	uaec.defaults()
	return withHooks(ctx, uaec.sqlSave, uaec.mutation, uaec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uaec *UserAccessEventCreate) SaveX(ctx context.Context) *UserAccessEvent {
	v, err := uaec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uaec *UserAccessEventCreate) Exec(ctx context.Context) error {
	_, err := uaec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uaec *UserAccessEventCreate) ExecX(ctx context.Context) {
	if err := uaec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uaec *UserAccessEventCreate) defaults() {
	if _, ok := uaec.mutation.CreatedAt(); !ok {
		v := useraccessevent.DefaultCreatedAt()
		uaec.mutation.SetCreatedAt(v)
	}
	if _, ok := uaec.mutation.UpdatedAt(); !ok {
		v := useraccessevent.DefaultUpdatedAt()
		uaec.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uaec *UserAccessEventCreate) check() error {
	if _, ok := uaec.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "UserAccessEvent.user_id"`)}
	}
	if _, ok := uaec.mutation.HostFrom(); !ok {
		return &ValidationError{Name: "host_from", err: errors.New(`ent: missing required field "UserAccessEvent.host_from"`)}
	}
	if v, ok := uaec.mutation.HostFrom(); ok {
		if err := useraccessevent.HostFromValidator(v); err != nil {
			return &ValidationError{Name: "host_from", err: fmt.Errorf(`ent: validator failed for field "UserAccessEvent.host_from": %w`, err)}
		}
	}
	if _, ok := uaec.mutation.APIMethod(); !ok {
		return &ValidationError{Name: "api_method", err: errors.New(`ent: missing required field "UserAccessEvent.api_method"`)}
	}
	if v, ok := uaec.mutation.APIMethod(); ok {
		if err := useraccessevent.APIMethodValidator(v); err != nil {
			return &ValidationError{Name: "api_method", err: fmt.Errorf(`ent: validator failed for field "UserAccessEvent.api_method": %w`, err)}
		}
	}
	if _, ok := uaec.mutation.APIPath(); !ok {
		return &ValidationError{Name: "api_path", err: errors.New(`ent: missing required field "UserAccessEvent.api_path"`)}
	}
	if v, ok := uaec.mutation.APIPath(); ok {
		if err := useraccessevent.APIPathValidator(v); err != nil {
			return &ValidationError{Name: "api_path", err: fmt.Errorf(`ent: validator failed for field "UserAccessEvent.api_path": %w`, err)}
		}
	}
	if _, ok := uaec.mutation.APIPathExtras(); !ok {
		return &ValidationError{Name: "api_path_extras", err: errors.New(`ent: missing required field "UserAccessEvent.api_path_extras"`)}
	}
	if _, ok := uaec.mutation.ResponseCode(); !ok {
		return &ValidationError{Name: "response_code", err: errors.New(`ent: missing required field "UserAccessEvent.response_code"`)}
	}
	if _, ok := uaec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "UserAccessEvent.created_at"`)}
	}
	if _, ok := uaec.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "UserAccessEvent.updated_at"`)}
	}
	if len(uaec.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "UserAccessEvent.user"`)}
	}
	return nil
}

func (uaec *UserAccessEventCreate) sqlSave(ctx context.Context) (*UserAccessEvent, error) {
	if err := uaec.check(); err != nil {
		return nil, err
	}
	_node, _spec := uaec.createSpec()
	if err := sqlgraph.CreateNode(ctx, uaec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	uaec.mutation.id = &_node.ID
	uaec.mutation.done = true
	return _node, nil
}

func (uaec *UserAccessEventCreate) createSpec() (*UserAccessEvent, *sqlgraph.CreateSpec) {
	var (
		_node = &UserAccessEvent{config: uaec.config}
		_spec = sqlgraph.NewCreateSpec(useraccessevent.Table, sqlgraph.NewFieldSpec(useraccessevent.FieldID, field.TypeInt))
	)
	if value, ok := uaec.mutation.HostFrom(); ok {
		_spec.SetField(useraccessevent.FieldHostFrom, field.TypeString, value)
		_node.HostFrom = value
	}
	if value, ok := uaec.mutation.APIMethod(); ok {
		_spec.SetField(useraccessevent.FieldAPIMethod, field.TypeString, value)
		_node.APIMethod = value
	}
	if value, ok := uaec.mutation.APIPath(); ok {
		_spec.SetField(useraccessevent.FieldAPIPath, field.TypeString, value)
		_node.APIPath = value
	}
	if value, ok := uaec.mutation.APIPathExtras(); ok {
		_spec.SetField(useraccessevent.FieldAPIPathExtras, field.TypeString, value)
		_node.APIPathExtras = value
	}
	if value, ok := uaec.mutation.ResponseCode(); ok {
		_spec.SetField(useraccessevent.FieldResponseCode, field.TypeInt, value)
		_node.ResponseCode = value
	}
	if value, ok := uaec.mutation.CreatedAt(); ok {
		_spec.SetField(useraccessevent.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := uaec.mutation.UpdatedAt(); ok {
		_spec.SetField(useraccessevent.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := uaec.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   useraccessevent.UserTable,
			Columns: []string{useraccessevent.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserAccessEventCreateBulk is the builder for creating many UserAccessEvent entities in bulk.
type UserAccessEventCreateBulk struct {
	config
	err      error
	builders []*UserAccessEventCreate
}

// Save creates the UserAccessEvent entities in the database.
func (uaecb *UserAccessEventCreateBulk) Save(ctx context.Context) ([]*UserAccessEvent, error) {
	if uaecb.err != nil {
		return nil, uaecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(uaecb.builders))
	nodes := make([]*UserAccessEvent, len(uaecb.builders))
	mutators := make([]Mutator, len(uaecb.builders))
	for i := range uaecb.builders {
		func(i int, root context.Context) {
			builder := uaecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserAccessEventMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uaecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uaecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uaecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (uaecb *UserAccessEventCreateBulk) SaveX(ctx context.Context) []*UserAccessEvent {
	v, err := uaecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uaecb *UserAccessEventCreateBulk) Exec(ctx context.Context) error {
	_, err := uaecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uaecb *UserAccessEventCreateBulk) ExecX(ctx context.Context) {
	if err := uaecb.Exec(ctx); err != nil {
		panic(err)
	}
}
