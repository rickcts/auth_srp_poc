// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/SimpnicServerTeam/scs-aaa-server/ent/user"
	"github.com/SimpnicServerTeam/scs-aaa-server/ent/useraccessevent"
)

// UserAccessEvent is the model entity for the UserAccessEvent schema.
type UserAccessEvent struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int64 `json:"user_id,omitempty"`
	// HostFrom holds the value of the "host_from" field.
	HostFrom string `json:"host_from,omitempty"`
	// APIMethod holds the value of the "api_method" field.
	APIMethod string `json:"api_method,omitempty"`
	// APIPath holds the value of the "api_path" field.
	APIPath string `json:"api_path,omitempty"`
	// APIPathExtras holds the value of the "api_path_extras" field.
	APIPathExtras string `json:"api_path_extras,omitempty"`
	// ResponseCode holds the value of the "response_code" field.
	ResponseCode int `json:"response_code,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserAccessEventQuery when eager-loading is set.
	Edges        UserAccessEventEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserAccessEventEdges holds the relations/edges for other nodes in the graph.
type UserAccessEventEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserAccessEventEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserAccessEvent) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case useraccessevent.FieldID, useraccessevent.FieldUserID, useraccessevent.FieldResponseCode:
			values[i] = new(sql.NullInt64)
		case useraccessevent.FieldHostFrom, useraccessevent.FieldAPIMethod, useraccessevent.FieldAPIPath, useraccessevent.FieldAPIPathExtras:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserAccessEvent fields.
func (uae *UserAccessEvent) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case useraccessevent.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			uae.ID = int(value.Int64)
		case useraccessevent.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				uae.UserID = value.Int64
			}
		case useraccessevent.FieldHostFrom:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field host_from", values[i])
			} else if value.Valid {
				uae.HostFrom = value.String
			}
		case useraccessevent.FieldAPIMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field api_method", values[i])
			} else if value.Valid {
				uae.APIMethod = value.String
			}
		case useraccessevent.FieldAPIPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field api_path", values[i])
			} else if value.Valid {
				uae.APIPath = value.String
			}
		case useraccessevent.FieldAPIPathExtras:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field api_path_extras", values[i])
			} else if value.Valid {
				uae.APIPathExtras = value.String
			}
		case useraccessevent.FieldResponseCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field response_code", values[i])
			} else if value.Valid {
				uae.ResponseCode = int(value.Int64)
			}
		default:
			uae.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserAccessEvent.
// This includes values selected through modifiers, order, etc.
func (uae *UserAccessEvent) Value(name string) (ent.Value, error) {
	return uae.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the UserAccessEvent entity.
func (uae *UserAccessEvent) QueryUser() *UserQuery {
	return NewUserAccessEventClient(uae.config).QueryUser(uae)
}

// Update returns a builder for updating this UserAccessEvent.
// Note that you need to call UserAccessEvent.Unwrap() before calling this method if this UserAccessEvent
// was returned from a transaction, and the transaction was committed or rolled back.
func (uae *UserAccessEvent) Update() *UserAccessEventUpdateOne {
	return NewUserAccessEventClient(uae.config).UpdateOne(uae)
}

// Unwrap unwraps the UserAccessEvent entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (uae *UserAccessEvent) Unwrap() *UserAccessEvent {
	_tx, ok := uae.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserAccessEvent is not a transactional entity")
	}
	uae.config.driver = _tx.drv
	return uae
}

// String implements the fmt.Stringer.
func (uae *UserAccessEvent) String() string {
	var builder strings.Builder
	builder.WriteString("UserAccessEvent(")
	builder.WriteString(fmt.Sprintf("id=%v, ", uae.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", uae.UserID))
	builder.WriteString(", ")
	builder.WriteString("host_from=")
	builder.WriteString(uae.HostFrom)
	builder.WriteString(", ")
	builder.WriteString("api_method=")
	builder.WriteString(uae.APIMethod)
	builder.WriteString(", ")
	builder.WriteString("api_path=")
	builder.WriteString(uae.APIPath)
	builder.WriteString(", ")
	builder.WriteString("api_path_extras=")
	builder.WriteString(uae.APIPathExtras)
	builder.WriteString(", ")
	builder.WriteString("response_code=")
	builder.WriteString(fmt.Sprintf("%v", uae.ResponseCode))
	builder.WriteByte(')')
	return builder.String()
}

// UserAccessEvents is a parsable slice of UserAccessEvent.
type UserAccessEvents []*UserAccessEvent
