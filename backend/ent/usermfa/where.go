// Code generated by ent, DO NOT EDIT.

package usermfa

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/rickcts/srp/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.UserMFA {
	return predicate.UserMFA(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.UserMFA {
	return predicate.UserMFA(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.UserMFA {
	return predicate.UserMFA(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.UserMFA {
	return predicate.UserMFA(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.UserMFA {
	return predicate.UserMFA(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.UserMFA {
	return predicate.UserMFA(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.UserMFA {
	return predicate.UserMFA(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.UserMFA {
	return predicate.UserMFA(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.UserMFA {
	return predicate.UserMFA(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int) predicate.UserMFA {
	return predicate.UserMFA(sql.FieldEQ(FieldUserID, v))
}

// Method applies equality check predicate on the "method" field. It's identical to MethodEQ.
func Method(v string) predicate.UserMFA {
	return predicate.UserMFA(sql.FieldEQ(FieldMethod, v))
}

// Params applies equality check predicate on the "params" field. It's identical to ParamsEQ.
func Params(v string) predicate.UserMFA {
	return predicate.UserMFA(sql.FieldEQ(FieldParams, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int) predicate.UserMFA {
	return predicate.UserMFA(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int) predicate.UserMFA {
	return predicate.UserMFA(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int) predicate.UserMFA {
	return predicate.UserMFA(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int) predicate.UserMFA {
	return predicate.UserMFA(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.UserMFA {
	return predicate.UserMFA(sql.FieldIsNull(FieldUserID))
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.UserMFA {
	return predicate.UserMFA(sql.FieldNotNull(FieldUserID))
}

// MethodEQ applies the EQ predicate on the "method" field.
func MethodEQ(v string) predicate.UserMFA {
	return predicate.UserMFA(sql.FieldEQ(FieldMethod, v))
}

// MethodNEQ applies the NEQ predicate on the "method" field.
func MethodNEQ(v string) predicate.UserMFA {
	return predicate.UserMFA(sql.FieldNEQ(FieldMethod, v))
}

// MethodIn applies the In predicate on the "method" field.
func MethodIn(vs ...string) predicate.UserMFA {
	return predicate.UserMFA(sql.FieldIn(FieldMethod, vs...))
}

// MethodNotIn applies the NotIn predicate on the "method" field.
func MethodNotIn(vs ...string) predicate.UserMFA {
	return predicate.UserMFA(sql.FieldNotIn(FieldMethod, vs...))
}

// MethodGT applies the GT predicate on the "method" field.
func MethodGT(v string) predicate.UserMFA {
	return predicate.UserMFA(sql.FieldGT(FieldMethod, v))
}

// MethodGTE applies the GTE predicate on the "method" field.
func MethodGTE(v string) predicate.UserMFA {
	return predicate.UserMFA(sql.FieldGTE(FieldMethod, v))
}

// MethodLT applies the LT predicate on the "method" field.
func MethodLT(v string) predicate.UserMFA {
	return predicate.UserMFA(sql.FieldLT(FieldMethod, v))
}

// MethodLTE applies the LTE predicate on the "method" field.
func MethodLTE(v string) predicate.UserMFA {
	return predicate.UserMFA(sql.FieldLTE(FieldMethod, v))
}

// MethodContains applies the Contains predicate on the "method" field.
func MethodContains(v string) predicate.UserMFA {
	return predicate.UserMFA(sql.FieldContains(FieldMethod, v))
}

// MethodHasPrefix applies the HasPrefix predicate on the "method" field.
func MethodHasPrefix(v string) predicate.UserMFA {
	return predicate.UserMFA(sql.FieldHasPrefix(FieldMethod, v))
}

// MethodHasSuffix applies the HasSuffix predicate on the "method" field.
func MethodHasSuffix(v string) predicate.UserMFA {
	return predicate.UserMFA(sql.FieldHasSuffix(FieldMethod, v))
}

// MethodEqualFold applies the EqualFold predicate on the "method" field.
func MethodEqualFold(v string) predicate.UserMFA {
	return predicate.UserMFA(sql.FieldEqualFold(FieldMethod, v))
}

// MethodContainsFold applies the ContainsFold predicate on the "method" field.
func MethodContainsFold(v string) predicate.UserMFA {
	return predicate.UserMFA(sql.FieldContainsFold(FieldMethod, v))
}

// ParamsEQ applies the EQ predicate on the "params" field.
func ParamsEQ(v string) predicate.UserMFA {
	return predicate.UserMFA(sql.FieldEQ(FieldParams, v))
}

// ParamsNEQ applies the NEQ predicate on the "params" field.
func ParamsNEQ(v string) predicate.UserMFA {
	return predicate.UserMFA(sql.FieldNEQ(FieldParams, v))
}

// ParamsIn applies the In predicate on the "params" field.
func ParamsIn(vs ...string) predicate.UserMFA {
	return predicate.UserMFA(sql.FieldIn(FieldParams, vs...))
}

// ParamsNotIn applies the NotIn predicate on the "params" field.
func ParamsNotIn(vs ...string) predicate.UserMFA {
	return predicate.UserMFA(sql.FieldNotIn(FieldParams, vs...))
}

// ParamsGT applies the GT predicate on the "params" field.
func ParamsGT(v string) predicate.UserMFA {
	return predicate.UserMFA(sql.FieldGT(FieldParams, v))
}

// ParamsGTE applies the GTE predicate on the "params" field.
func ParamsGTE(v string) predicate.UserMFA {
	return predicate.UserMFA(sql.FieldGTE(FieldParams, v))
}

// ParamsLT applies the LT predicate on the "params" field.
func ParamsLT(v string) predicate.UserMFA {
	return predicate.UserMFA(sql.FieldLT(FieldParams, v))
}

// ParamsLTE applies the LTE predicate on the "params" field.
func ParamsLTE(v string) predicate.UserMFA {
	return predicate.UserMFA(sql.FieldLTE(FieldParams, v))
}

// ParamsContains applies the Contains predicate on the "params" field.
func ParamsContains(v string) predicate.UserMFA {
	return predicate.UserMFA(sql.FieldContains(FieldParams, v))
}

// ParamsHasPrefix applies the HasPrefix predicate on the "params" field.
func ParamsHasPrefix(v string) predicate.UserMFA {
	return predicate.UserMFA(sql.FieldHasPrefix(FieldParams, v))
}

// ParamsHasSuffix applies the HasSuffix predicate on the "params" field.
func ParamsHasSuffix(v string) predicate.UserMFA {
	return predicate.UserMFA(sql.FieldHasSuffix(FieldParams, v))
}

// ParamsIsNil applies the IsNil predicate on the "params" field.
func ParamsIsNil() predicate.UserMFA {
	return predicate.UserMFA(sql.FieldIsNull(FieldParams))
}

// ParamsNotNil applies the NotNil predicate on the "params" field.
func ParamsNotNil() predicate.UserMFA {
	return predicate.UserMFA(sql.FieldNotNull(FieldParams))
}

// ParamsEqualFold applies the EqualFold predicate on the "params" field.
func ParamsEqualFold(v string) predicate.UserMFA {
	return predicate.UserMFA(sql.FieldEqualFold(FieldParams, v))
}

// ParamsContainsFold applies the ContainsFold predicate on the "params" field.
func ParamsContainsFold(v string) predicate.UserMFA {
	return predicate.UserMFA(sql.FieldContainsFold(FieldParams, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.UserMFA {
	return predicate.UserMFA(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.UserMFA {
	return predicate.UserMFA(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserMFA) predicate.UserMFA {
	return predicate.UserMFA(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserMFA) predicate.UserMFA {
	return predicate.UserMFA(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserMFA) predicate.UserMFA {
	return predicate.UserMFA(sql.NotPredicates(p))
}
