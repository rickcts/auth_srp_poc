// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rickcts/srp/ent/user"
	"github.com/rickcts/srp/ent/userauthevent"
)

// UserAuthEventCreate is the builder for creating a UserAuthEvent entity.
type UserAuthEventCreate struct {
	config
	mutation *UserAuthEventMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (uaec *UserAuthEventCreate) SetUserID(i int) *UserAuthEventCreate {
	uaec.mutation.SetUserID(i)
	return uaec
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (uaec *UserAuthEventCreate) SetNillableUserID(i *int) *UserAuthEventCreate {
	if i != nil {
		uaec.SetUserID(*i)
	}
	return uaec
}

// SetAuthProvider sets the "auth_provider" field.
func (uaec *UserAuthEventCreate) SetAuthProvider(i int64) *UserAuthEventCreate {
	uaec.mutation.SetAuthProvider(i)
	return uaec
}

// SetHost sets the "host" field.
func (uaec *UserAuthEventCreate) SetHost(s string) *UserAuthEventCreate {
	uaec.mutation.SetHost(s)
	return uaec
}

// SetTimestamp sets the "timestamp" field.
func (uaec *UserAuthEventCreate) SetTimestamp(t time.Time) *UserAuthEventCreate {
	uaec.mutation.SetTimestamp(t)
	return uaec
}

// SetNs sets the "ns" field.
func (uaec *UserAuthEventCreate) SetNs(i int64) *UserAuthEventCreate {
	uaec.mutation.SetNs(i)
	return uaec
}

// SetErrorCode sets the "error_code" field.
func (uaec *UserAuthEventCreate) SetErrorCode(i int) *UserAuthEventCreate {
	uaec.mutation.SetErrorCode(i)
	return uaec
}

// SetUser sets the "user" edge to the User entity.
func (uaec *UserAuthEventCreate) SetUser(u *User) *UserAuthEventCreate {
	return uaec.SetUserID(u.ID)
}

// Mutation returns the UserAuthEventMutation object of the builder.
func (uaec *UserAuthEventCreate) Mutation() *UserAuthEventMutation {
	return uaec.mutation
}

// Save creates the UserAuthEvent in the database.
func (uaec *UserAuthEventCreate) Save(ctx context.Context) (*UserAuthEvent, error) {
	return withHooks(ctx, uaec.sqlSave, uaec.mutation, uaec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uaec *UserAuthEventCreate) SaveX(ctx context.Context) *UserAuthEvent {
	v, err := uaec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uaec *UserAuthEventCreate) Exec(ctx context.Context) error {
	_, err := uaec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uaec *UserAuthEventCreate) ExecX(ctx context.Context) {
	if err := uaec.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uaec *UserAuthEventCreate) check() error {
	if _, ok := uaec.mutation.AuthProvider(); !ok {
		return &ValidationError{Name: "auth_provider", err: errors.New(`ent: missing required field "UserAuthEvent.auth_provider"`)}
	}
	if _, ok := uaec.mutation.Host(); !ok {
		return &ValidationError{Name: "host", err: errors.New(`ent: missing required field "UserAuthEvent.host"`)}
	}
	if _, ok := uaec.mutation.Timestamp(); !ok {
		return &ValidationError{Name: "timestamp", err: errors.New(`ent: missing required field "UserAuthEvent.timestamp"`)}
	}
	if _, ok := uaec.mutation.Ns(); !ok {
		return &ValidationError{Name: "ns", err: errors.New(`ent: missing required field "UserAuthEvent.ns"`)}
	}
	if _, ok := uaec.mutation.ErrorCode(); !ok {
		return &ValidationError{Name: "error_code", err: errors.New(`ent: missing required field "UserAuthEvent.error_code"`)}
	}
	return nil
}

func (uaec *UserAuthEventCreate) sqlSave(ctx context.Context) (*UserAuthEvent, error) {
	if err := uaec.check(); err != nil {
		return nil, err
	}
	_node, _spec := uaec.createSpec()
	if err := sqlgraph.CreateNode(ctx, uaec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	uaec.mutation.id = &_node.ID
	uaec.mutation.done = true
	return _node, nil
}

func (uaec *UserAuthEventCreate) createSpec() (*UserAuthEvent, *sqlgraph.CreateSpec) {
	var (
		_node = &UserAuthEvent{config: uaec.config}
		_spec = sqlgraph.NewCreateSpec(userauthevent.Table, sqlgraph.NewFieldSpec(userauthevent.FieldID, field.TypeInt))
	)
	if value, ok := uaec.mutation.AuthProvider(); ok {
		_spec.SetField(userauthevent.FieldAuthProvider, field.TypeInt64, value)
		_node.AuthProvider = value
	}
	if value, ok := uaec.mutation.Host(); ok {
		_spec.SetField(userauthevent.FieldHost, field.TypeString, value)
		_node.Host = value
	}
	if value, ok := uaec.mutation.Timestamp(); ok {
		_spec.SetField(userauthevent.FieldTimestamp, field.TypeTime, value)
		_node.Timestamp = value
	}
	if value, ok := uaec.mutation.Ns(); ok {
		_spec.SetField(userauthevent.FieldNs, field.TypeInt64, value)
		_node.Ns = value
	}
	if value, ok := uaec.mutation.ErrorCode(); ok {
		_spec.SetField(userauthevent.FieldErrorCode, field.TypeInt, value)
		_node.ErrorCode = value
	}
	if nodes := uaec.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userauthevent.UserTable,
			Columns: []string{userauthevent.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserAuthEventCreateBulk is the builder for creating many UserAuthEvent entities in bulk.
type UserAuthEventCreateBulk struct {
	config
	err      error
	builders []*UserAuthEventCreate
}

// Save creates the UserAuthEvent entities in the database.
func (uaecb *UserAuthEventCreateBulk) Save(ctx context.Context) ([]*UserAuthEvent, error) {
	if uaecb.err != nil {
		return nil, uaecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(uaecb.builders))
	nodes := make([]*UserAuthEvent, len(uaecb.builders))
	mutators := make([]Mutator, len(uaecb.builders))
	for i := range uaecb.builders {
		func(i int, root context.Context) {
			builder := uaecb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserAuthEventMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uaecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uaecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uaecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (uaecb *UserAuthEventCreateBulk) SaveX(ctx context.Context) []*UserAuthEvent {
	v, err := uaecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uaecb *UserAuthEventCreateBulk) Exec(ctx context.Context) error {
	_, err := uaecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uaecb *UserAuthEventCreateBulk) ExecX(ctx context.Context) {
	if err := uaecb.Exec(ctx); err != nil {
		panic(err)
	}
}
