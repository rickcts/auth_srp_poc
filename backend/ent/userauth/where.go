// Code generated by ent, DO NOT EDIT.

package userauth

import (
	"entgo.io/ent/dialect/sql"
	"github.com/rickcts/srp/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int64) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldEQ(FieldUserID, v))
}

// AuthExtras applies equality check predicate on the "auth_extras" field. It's identical to AuthExtrasEQ.
func AuthExtras(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldEQ(FieldAuthExtras, v))
}

// AuthProvider applies equality check predicate on the "auth_provider" field. It's identical to AuthProviderEQ.
func AuthProvider(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldEQ(FieldAuthProvider, v))
}

// AuthID applies equality check predicate on the "auth_id" field. It's identical to AuthIDEQ.
func AuthID(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldEQ(FieldAuthID, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int64) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int64) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int64) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int64) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v int64) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v int64) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v int64) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v int64) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldLTE(FieldUserID, v))
}

// AuthExtrasEQ applies the EQ predicate on the "auth_extras" field.
func AuthExtrasEQ(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldEQ(FieldAuthExtras, v))
}

// AuthExtrasNEQ applies the NEQ predicate on the "auth_extras" field.
func AuthExtrasNEQ(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldNEQ(FieldAuthExtras, v))
}

// AuthExtrasIn applies the In predicate on the "auth_extras" field.
func AuthExtrasIn(vs ...string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldIn(FieldAuthExtras, vs...))
}

// AuthExtrasNotIn applies the NotIn predicate on the "auth_extras" field.
func AuthExtrasNotIn(vs ...string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldNotIn(FieldAuthExtras, vs...))
}

// AuthExtrasGT applies the GT predicate on the "auth_extras" field.
func AuthExtrasGT(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldGT(FieldAuthExtras, v))
}

// AuthExtrasGTE applies the GTE predicate on the "auth_extras" field.
func AuthExtrasGTE(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldGTE(FieldAuthExtras, v))
}

// AuthExtrasLT applies the LT predicate on the "auth_extras" field.
func AuthExtrasLT(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldLT(FieldAuthExtras, v))
}

// AuthExtrasLTE applies the LTE predicate on the "auth_extras" field.
func AuthExtrasLTE(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldLTE(FieldAuthExtras, v))
}

// AuthExtrasContains applies the Contains predicate on the "auth_extras" field.
func AuthExtrasContains(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldContains(FieldAuthExtras, v))
}

// AuthExtrasHasPrefix applies the HasPrefix predicate on the "auth_extras" field.
func AuthExtrasHasPrefix(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldHasPrefix(FieldAuthExtras, v))
}

// AuthExtrasHasSuffix applies the HasSuffix predicate on the "auth_extras" field.
func AuthExtrasHasSuffix(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldHasSuffix(FieldAuthExtras, v))
}

// AuthExtrasEqualFold applies the EqualFold predicate on the "auth_extras" field.
func AuthExtrasEqualFold(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldEqualFold(FieldAuthExtras, v))
}

// AuthExtrasContainsFold applies the ContainsFold predicate on the "auth_extras" field.
func AuthExtrasContainsFold(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldContainsFold(FieldAuthExtras, v))
}

// AuthProviderEQ applies the EQ predicate on the "auth_provider" field.
func AuthProviderEQ(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldEQ(FieldAuthProvider, v))
}

// AuthProviderNEQ applies the NEQ predicate on the "auth_provider" field.
func AuthProviderNEQ(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldNEQ(FieldAuthProvider, v))
}

// AuthProviderIn applies the In predicate on the "auth_provider" field.
func AuthProviderIn(vs ...string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldIn(FieldAuthProvider, vs...))
}

// AuthProviderNotIn applies the NotIn predicate on the "auth_provider" field.
func AuthProviderNotIn(vs ...string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldNotIn(FieldAuthProvider, vs...))
}

// AuthProviderGT applies the GT predicate on the "auth_provider" field.
func AuthProviderGT(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldGT(FieldAuthProvider, v))
}

// AuthProviderGTE applies the GTE predicate on the "auth_provider" field.
func AuthProviderGTE(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldGTE(FieldAuthProvider, v))
}

// AuthProviderLT applies the LT predicate on the "auth_provider" field.
func AuthProviderLT(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldLT(FieldAuthProvider, v))
}

// AuthProviderLTE applies the LTE predicate on the "auth_provider" field.
func AuthProviderLTE(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldLTE(FieldAuthProvider, v))
}

// AuthProviderContains applies the Contains predicate on the "auth_provider" field.
func AuthProviderContains(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldContains(FieldAuthProvider, v))
}

// AuthProviderHasPrefix applies the HasPrefix predicate on the "auth_provider" field.
func AuthProviderHasPrefix(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldHasPrefix(FieldAuthProvider, v))
}

// AuthProviderHasSuffix applies the HasSuffix predicate on the "auth_provider" field.
func AuthProviderHasSuffix(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldHasSuffix(FieldAuthProvider, v))
}

// AuthProviderEqualFold applies the EqualFold predicate on the "auth_provider" field.
func AuthProviderEqualFold(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldEqualFold(FieldAuthProvider, v))
}

// AuthProviderContainsFold applies the ContainsFold predicate on the "auth_provider" field.
func AuthProviderContainsFold(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldContainsFold(FieldAuthProvider, v))
}

// AuthIDEQ applies the EQ predicate on the "auth_id" field.
func AuthIDEQ(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldEQ(FieldAuthID, v))
}

// AuthIDNEQ applies the NEQ predicate on the "auth_id" field.
func AuthIDNEQ(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldNEQ(FieldAuthID, v))
}

// AuthIDIn applies the In predicate on the "auth_id" field.
func AuthIDIn(vs ...string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldIn(FieldAuthID, vs...))
}

// AuthIDNotIn applies the NotIn predicate on the "auth_id" field.
func AuthIDNotIn(vs ...string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldNotIn(FieldAuthID, vs...))
}

// AuthIDGT applies the GT predicate on the "auth_id" field.
func AuthIDGT(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldGT(FieldAuthID, v))
}

// AuthIDGTE applies the GTE predicate on the "auth_id" field.
func AuthIDGTE(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldGTE(FieldAuthID, v))
}

// AuthIDLT applies the LT predicate on the "auth_id" field.
func AuthIDLT(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldLT(FieldAuthID, v))
}

// AuthIDLTE applies the LTE predicate on the "auth_id" field.
func AuthIDLTE(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldLTE(FieldAuthID, v))
}

// AuthIDContains applies the Contains predicate on the "auth_id" field.
func AuthIDContains(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldContains(FieldAuthID, v))
}

// AuthIDHasPrefix applies the HasPrefix predicate on the "auth_id" field.
func AuthIDHasPrefix(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldHasPrefix(FieldAuthID, v))
}

// AuthIDHasSuffix applies the HasSuffix predicate on the "auth_id" field.
func AuthIDHasSuffix(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldHasSuffix(FieldAuthID, v))
}

// AuthIDEqualFold applies the EqualFold predicate on the "auth_id" field.
func AuthIDEqualFold(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldEqualFold(FieldAuthID, v))
}

// AuthIDContainsFold applies the ContainsFold predicate on the "auth_id" field.
func AuthIDContainsFold(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldContainsFold(FieldAuthID, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserAuth) predicate.UserAuth {
	return predicate.UserAuth(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserAuth) predicate.UserAuth {
	return predicate.UserAuth(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserAuth) predicate.UserAuth {
	return predicate.UserAuth(sql.NotPredicates(p))
}
